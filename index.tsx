/* tslint:disable */
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */

import {GoogleGenAI, Chat, Type, GenerateContentResponse} from '@google/genai';
import {LitElement, css, html, nothing} from 'lit';
import {customElement, state, query} from 'lit/decorators.js';
import {unsafeHTML} from 'lit/directives/unsafe-html.js';
import './visual-3d';
import {AxeeVisuals3D} from './visual-3d';
import {AxeeAudioEngine} from './audio-engine';
import './light-curve-visualizer';
import './ControlTray.tsx';
import './shader-lab-visualizer.tsx';
import {
  vs as atmosphereVs,
  fs as atmosphereFs,
} from './atmosphere-shader.tsx';

export interface PlanetData {
  id?: string; // UUID, formerly from Supabase
  created_at?: string; // Timestamp, formerly from Supabase
  celestial_body_id: string; // Unique ID generated by the app
  planetName: string;
  starSystem: string;
  starType: string;
  distanceLightYears: number;
  planetType: string;
  rotationalPeriod: string;
  orbitalPeriod: string;
  moons: {
    count: number;
    names: string[];
  };
  potentialForLife: {
    assessment: string; // e.g., 'Habitable', 'Potentially Habitable', 'Unlikely'
    reasoning: string;
    biosignatures: string[];
  };
  discoveryNarrative: string;
  discoveryMethodology: string;
  atmosphericComposition: string;
  surfaceFeatures: string;
  keyFeatures: string[];
  aiWhisper: string;
  visualization: {
    color1: string;
    color2: string;
    oceanColor: string;
    atmosphereColor: string;
    hasRings: boolean;
    cloudiness: number;
    iceCoverage: number;
    surfaceTexture: string;
  };
  groundingChunks?: GroundingChunk[];
}

export interface GroundingChunk {
  web?: {
    uri?: string;
    title?: string;
  };
}

export type MusicMood = 'galaxy' | 'serene' | 'tense' | 'mysterious' | 'off';

// Initial data to populate the app without a database.
const MOCK_PLANET: PlanetData = {
  id: 'axee-00001',
  created_at: new Date().toISOString(),
  celestial_body_id: 'axee-00001',
  planetName: 'Aethelgard',
  starSystem: 'Cygni-B7',
  starType: 'K-type orange dwarf',
  distanceLightYears: 42.7,
  planetType: 'Terrestrial Super-Earth',
  rotationalPeriod: '36.2 Earth hours',
  orbitalPeriod: '289.5 Earth days',
  moons: {
    count: 2,
    names: ['Aethel', 'Gard'],
  },
  potentialForLife: {
    assessment: 'Potentially Habitable',
    reasoning:
      'Located within the habitable zone with a dense, nitrogen-oxygen atmosphere. Evidence of liquid water on the surface.',
    biosignatures: ['Oxygen', 'Methane (trace)'],
  },
  discoveryNarrative:
    'A faint, periodic dip in the light curve of Cygni-B7 hinted at a transiting world. Follow-up observations confirmed a super-earth with a significant atmosphere, a prime candidate in the search for life.',
  discoveryMethodology:
    'Transit method via TESS, confirmed with radial velocity measurements.',
  atmosphericComposition:
    '72% Nitrogen, 26% Oxygen, 2% Argon and other trace gases.',
  surfaceFeatures:
    'Vast, shallow oceans dotted with volcanic archipelagos. The continents are covered in a dense, reddish-purple flora.',
  keyFeatures: [
    'Extensive liquid water oceans',
    'Oxygen-rich atmosphere',
    'Photosynthetic life',
  ],
  aiWhisper:
    'A world painted in violet and teal, where twin moons dance in a wine-dark sea.',
  visualization: {
    color1: '#884466', // Purple-ish land
    color2: '#CC6688', // Lighter highlights
    oceanColor: '#1E4A6D', // Deep blue ocean
    atmosphereColor: '#A0D0FF', // Earth-like atmosphere
    hasRings: false,
    cloudiness: 0.4,
    iceCoverage: 0.1,
    surfaceTexture: 'TERRESTRIAL',
  },
};

@customElement('axee-interface')
export class AxeeInterface extends LitElement {
  @state() private isLoading = false;
  @state() private statusMessage = 'Awaiting Synthesis Command';
  @state() private discoveredPlanets: PlanetData[] = [MOCK_PLANET];
  @state() private selectedPlanetId: string | null = null;
  @state() private error: string | null = null;
  @state() private userPrompt = '';
  @state() private hasStartedDiscovery = false;
  @state() private isAboutModalOpen = false;

  // Audio & Voice states
  @state() private isSpeaking = false;
  @state() private isMuted = false;
  @state() private currentMood: MusicMood = 'off';
  @state() private hasInteracted = false;

  // Filtering & Sorting states
  @state() private lifeFilter = 'all';
  @state() private typeFilter = 'all';
  @state() private sortBy = 'discoveryDate_desc';
  @state() private featureFilter = '';

  // New discovery mode states
  @state() private discoveryMode:
    | 'synthesis'
    | 'analysis'
    | 'chat'
    | 'shader-lab' = 'synthesis';
  @state() private isAnalyzingData = false;

  // UI State
  @state() private isLeftPanelMinimized = false;
  @state() private isStatusPanelMinimized = false;
  @state() private isTopRightPanelMinimized = false;
  @state() private visualsViewMode: 'single' | 'quad' = 'quad';

  // AI Model Training states
  @state() private aiModelStatus: 'untrained' | 'training' | 'ready' =
    'untrained';
  @state() private trainingProgress = 0;
  @state() private trainingStatusMessage = '';
  @state() private trainingSubMessage = '';
  @state() private trainingTimeRemaining = '';
  @state() private trainingUseKeplerData = true;
  @state() private trainingUseTessData = true;
  @state() private trainingClassifier:
    | 'random-forest'
    | 'cnn'
    | 'gradient-boosting' = 'random-forest';
  @state() private trainingEpochs = 50;
  @state() private trainingLearningRate = 0.001;
  @state() private trainingBatchSize = 64;
  @state() private trainingValidationAccuracy = 0;
  @state() private isTrainingConfirmationOpen = false;
  private trainingInterval: ReturnType<typeof setInterval> | null = null;

  // Chat states
  @state() private chatHistory: {role: 'user' | 'model'; text: string}[] = [];
  private chat: Chat | null = null;

  // Shader Lab states
  @state() private shaderLabColor = '#a0d0ff';
  @state() private shaderLabFresnelPower = 4.0;
  @state() private shaderLabExplanation = '';
  @state() private isExplanationLoading = false;
  @state() private isExplanationModalOpen = false;
  @state()
  private shaderLabPresets: {
    name: string;
    color: string;
    fresnelPower: number;
  }[] = [
    {name: 'Default Cyan', color: '#a0d0ff', fresnelPower: 4.0},
    {name: 'Solar Flare', color: '#ff8844', fresnelPower: 8.0},
    {name: 'Nebula Green', color: '#44ffaa', fresnelPower: 2.5},
  ];
  @state() private selectedPreset = 'Default Cyan';

  @query('axee-audio-engine') private audioEngine!: AxeeAudioEngine;

  private ai!: GoogleGenAI;
  private discoveryInterval: ReturnType<typeof setInterval> | null = null;

  private triggerHaptic(pattern: number | number[] = 5): void {
    if (window.navigator && 'vibrate' in window.navigator) {
      try {
        window.navigator.vibrate(pattern);
      } catch (e) {
        console.warn('Haptic feedback failed.', e);
      }
    }
  }

  constructor() {
    super();
    this.initAI();
  }

  private initAI() {
    try {
      this.ai = new GoogleGenAI({apiKey: process.env.API_KEY});
      this.statusMessage = `${this.discoveredPlanets.length} systems loaded from local memory.`;
    } catch (err: any) {
      console.error('AI Initialization failed:', err);
      this.statusMessage = 'Error: AI Initialization Failed.';
      this.error =
        err.message ||
        'A critical error occurred during AI setup. The API key may be missing or invalid.';
    }
  }

  connectedCallback() {
    super.connectedCallback();
    this.handleUrlHash();
  }

  disconnectedCallback() {
    super.disconnectedCallback();
    if (this.discoveryInterval) {
      clearInterval(this.discoveryInterval);
    }
    if (this.trainingInterval) {
      clearInterval(this.trainingInterval);
    }
  }

  private handleUrlHash() {
    if (window.location.hash.startsWith('#planet_data=')) {
      try {
        const encodedData = window.location.hash.substring(
          '#planet_data='.length,
        );
        const decodedJson = atob(encodedData);
        const planetData: PlanetData = JSON.parse(decodedJson);

        if (planetData && planetData.celestial_body_id) {
          // Check if planet already exists
          const exists = this.discoveredPlanets.some(
            (p) => p.celestial_body_id === planetData.celestial_body_id,
          );
          if (!exists) {
            // Add it to the list
            this.discoveredPlanets = [planetData, ...this.discoveredPlanets];
          }

          // Select the planet
          this.selectedPlanetId = planetData.celestial_body_id;
          this.statusMessage = `Loaded shared planet: ${planetData.planetName}`;
          this.triggerHaptic();

          // Clean the URL
          history.replaceState(
            null,
            '',
            window.location.pathname + window.location.search,
          );
        }
      } catch (e) {
        console.error('Failed to parse shared planet data from URL hash:', e);
        this.error = 'Could not load shared planet data.';
        // Clean the URL in case of error too
        history.replaceState(
          null,
          '',
          window.location.pathname + window.location.search,
        );
      }
    }
  }

  private get filteredAndSortedPlanets() {
    let filteredPlanets = [...this.discoveredPlanets];

    // Filter by life potential
    if (this.lifeFilter !== 'all') {
      filteredPlanets = filteredPlanets.filter(
        (p) =>
          p.potentialForLife.assessment.replace(/ /g, '-').toLowerCase() ===
          this.lifeFilter,
      );
    }

    // Filter by planet type
    if (this.typeFilter !== 'all') {
      filteredPlanets = filteredPlanets.filter(
        (p) =>
          p.planetType.replace(/ /g, '-').toLowerCase() === this.typeFilter,
      );
    }

    // Filter by feature keyword
    const featureQuery = this.featureFilter.trim().toLowerCase();
    if (featureQuery) {
      filteredPlanets = filteredPlanets.filter((p) =>
        p.keyFeatures.some((feature) =>
          feature.toLowerCase().includes(featureQuery),
        ),
      );
    }

    // Sorting
    filteredPlanets.sort((a, b) => {
      switch (this.sortBy) {
        case 'name_asc':
          return a.planetName.localeCompare(b.planetName);
        case 'name_desc':
          return b.planetName.localeCompare(a.planetName);
        case 'distance_asc':
          return a.distanceLightYears - b.distanceLightYears;
        case 'distance_desc':
          return b.distanceLightYears - a.distanceLightYears;
        case 'discoveryDate_desc': // Default
        default:
          return (
            new Date(b.created_at!).getTime() -
            new Date(a.created_at!).getTime()
          );
      }
    });

    return filteredPlanets;
  }

  private async synthesizePlanetData(userConcept: string) {
    this.isLoading = true;
    this.error = null;
    this.statusMessage = 'Synthesizing planetary data...';
    this.audioEngine?.playInteractionSound();

    const prompt = `
      You are AXEE, the AURELION Exoplanet Synthesis Engine.
      Your task is to generate a scientifically plausible but fictional exoplanet based on a user's creative concept.
      The output must be a single JSON object that strictly adheres to the provided schema. Do not include any markdown or extra text outside the JSON object.

      User Concept: "${userConcept}"

      Generate a complete and detailed profile for this exoplanet. Be imaginative and ensure all fields are filled with consistent and compelling information.
      For the 'visualization.surfaceTexture' field, you must choose one of the following exact strings: 'TERRESTRIAL', 'GAS_GIANT', 'VOLCANIC', 'ICY'.
    `;

    const schema = {
      type: Type.OBJECT,
      properties: {
        planetName: {
          type: Type.STRING,
          description: 'A unique and evocative name for the exoplanet.',
        },
        starSystem: {
          type: Type.STRING,
          description: 'The name of the star system it belongs to.',
        },
        starType: {
          type: Type.STRING,
          description:
            'The spectral type of its host star (e.g., G-type, M-type dwarf).',
        },
        distanceLightYears: {
          type: Type.NUMBER,
          description: 'The distance from Earth in light years.',
        },
        planetType: {
          type: Type.STRING,
          description:
            'The classification of the planet (e.g., Terrestrial, Gas Giant, Ice Giant, Super-Earth).',
        },
        rotationalPeriod: {
          type: Type.STRING,
          description:
            'The length of one day on the planet, in Earth hours or days.',
        },
        orbitalPeriod: {
          type: Type.STRING,
          description:
            'The length of one year on the planet, in Earth days or years.',
        },
        moons: {
          type: Type.OBJECT,
          properties: {
            count: {
              type: Type.INTEGER,
              description: 'The number of moons orbiting the planet.',
            },
            names: {
              type: Type.ARRAY,
              items: {type: Type.STRING},
              description: 'The names of its major moons.',
            },
          },
          required: ['count', 'names'],
        },
        potentialForLife: {
          type: Type.OBJECT,
          properties: {
            assessment: {
              type: Type.STRING,
              description:
                "Assessment of life potential, e.g., 'Habitable', 'Potentially Habitable', 'Unlikely'.",
            },
            reasoning: {
              type: Type.STRING,
              description: 'Scientific reasoning for the assessment.',
            },
            biosignatures: {
              type: Type.ARRAY,
              items: {type: Type.STRING},
              description:
                'Potential biosignatures detected or hypothesized.',
            },
          },
          required: ['assessment', 'reasoning', 'biosignatures'],
        },
        discoveryNarrative: {
          type: Type.STRING,
          description:
            "A creative, narrative-style story about the planet's discovery.",
        },
        discoveryMethodology: {
          type: Type.STRING,
          description:
            'The scientific method used for its discovery (e.g., Transit method, Radial velocity).',
        },
        atmosphericComposition: {
          type: Type.STRING,
          description: 'A summary of the main gases in its atmosphere.',
        },
        surfaceFeatures: {
          type: Type.STRING,
          description:
            "A description of the planet's surface geology and geography.",
        },
        keyFeatures: {
          type: Type.ARRAY,
          items: {type: Type.STRING},
          description:
            'A bullet-point list of 3-5 most important or unique features.',
        },
        aiWhisper: {
          type: Type.STRING,
          description:
            'A short, poetic, or mysterious phrase that captures the essence of the planet.',
        },
        visualization: {
          type: Type.OBJECT,
          properties: {
            color1: {
              type: Type.STRING,
              description:
                'Primary surface/land color as a hex code (e.g., #884466).',
            },
            color2: {
              type: Type.STRING,
              description:
                'Secondary surface/highlight color as a hex code (e.g., #CC6688).',
            },
            oceanColor: {
              type: Type.STRING,
              description:
                'The color of oceans or liquid bodies as a hex code (e.g., #1E4A6D).',
            },
            atmosphereColor: {
              type: Type.STRING,
              description:
                'The color of the atmospheric glow as a hex code (e.g., #A0D0FF).',
            },
            hasRings: {
              type: Type.BOOLEAN,
              description: 'Whether the planet has rings.',
            },
            cloudiness: {
              type: Type.NUMBER,
              description:
                'A value from 0.0 (clear) to 1.0 (overcast) representing cloud cover.',
            },
            iceCoverage: {
              type: Type.NUMBER,
              description:
                'A value from 0.0 (no ice) to 1.0 (fully ice-covered).',
            },
            surfaceTexture: {
              type: Type.STRING,
              description:
                "The type of procedural surface texture. Must be one of: 'TERRESTRIAL', 'GAS_GIANT', 'VOLCANIC', 'ICY'.",
            },
          },
          required: [
            'color1',
            'color2',
            'oceanColor',
            'atmosphereColor',
            'hasRings',
            'cloudiness',
            'iceCoverage',
            'surfaceTexture',
          ],
        },
      },
      required: [
        'planetName',
        'starSystem',
        'starType',
        'distanceLightYears',
        'planetType',
        'rotationalPeriod',
        'orbitalPeriod',
        'moons',
        'potentialForLife',
        'discoveryNarrative',
        'discoveryMethodology',
        'atmosphericComposition',
        'surfaceFeatures',
        'keyFeatures',
        'aiWhisper',
        'visualization',
      ],
    };

    try {
      const response: GenerateContentResponse = await this.ai.models.generateContent({
        model: 'gemini-2.5-flash',
        contents: prompt,
        config: {
          responseMimeType: 'application/json',
          responseSchema: schema,
        },
      });

      const planetJson = JSON.parse(response.text);
      const newPlanet: PlanetData = {
        ...planetJson,
        celestial_body_id: `axee-${Date.now()}`,
        created_at: new Date().toISOString(),
      };

      this.discoveredPlanets = [newPlanet, ...this.discoveredPlanets];
      this.selectedPlanetId = newPlanet.celestial_body_id;
      this.statusMessage = `Synthesis complete. Discovered ${newPlanet.planetName}.`;
      this.userPrompt = '';
      this.audioEngine?.playSuccessSound();
      this.triggerHaptic([10, 50, 20]);
    } catch (err) {
      console.error('Planet synthesis error:', err);
      this.error =
        'An error occurred during synthesis. The AI may be offline or the request was blocked.';
      this.statusMessage = 'Error: Synthesis Failed.';
      this.audioEngine?.playErrorSound();
    } finally {
      this.isLoading = false;
    }
  }

  private async handleChatSubmit() {
    if (!this.userPrompt.trim() || this.isLoading) return;

    const text = this.userPrompt;
    this.chatHistory = [...this.chatHistory, {role: 'user', text}];
    this.userPrompt = '';
    this.isLoading = true;
    this.statusMessage = 'AI is thinking...';

    try {
      if (!this.chat) {
        const selectedPlanet = this.discoveredPlanets.find(
          (p) => p.celestial_body_id === this.selectedPlanetId,
        );
        const systemInstruction = selectedPlanet
          ? `You are an astrobiology expert discussing the planet ${selectedPlanet.planetName}. Your knowledge is based on this data: ${JSON.stringify(selectedPlanet)}`
          : 'You are an expert on astrobiology and speculative exoplanet science.';

        this.chat = this.ai.chats.create({
          model: 'gemini-2.5-flash',
          config: {systemInstruction},
        });
      }

      const response = await this.chat.sendMessage({message: text});

      this.chatHistory = [
        ...this.chatHistory,
        {role: 'model', text: response.text},
      ];
    } catch (err) {
      console.error('Chat error:', err);
      this.error = 'Failed to get a response from the AI.';
      this.chatHistory = [
        ...this.chatHistory,
        {
          role: 'model',
          text: 'Sorry, I encountered an error. Please try again.',
        },
      ];
    } finally {
      this.isLoading = false;
      this.statusMessage = 'Ready for new command.';
    }
  }

  private async handleExplainShader() {
    if (this.isExplanationLoading) return;
    this.isExplanationLoading = true;
    this.shaderLabExplanation = ''; // Clear previous explanation

    const prompt = `
      You are a shader expert explaining a GLSL fragment shader to a beginner.
      Explain what the following shader does in simple terms.
      Focus on the role of the uniforms 'uAtmosphereColor' and 'uFresnelPower'.

      Current values:
      - uAtmosphereColor: ${this.shaderLabColor}
      - uFresnelPower: ${this.shaderLabFresnelPower.toFixed(1)}

      Fragment Shader Code:
      \`\`\`glsl
      ${atmosphereFs}
      \`\`\`

      Provide a concise explanation.
    `;

    try {
      const response = await this.ai.models.generateContent({
        model: 'gemini-2.5-flash',
        contents: prompt,
      });
      this.shaderLabExplanation = response.text;
    } catch (err)
        {
      console.error('Shader explanation error:', err);
      this.shaderLabExplanation =
        'Sorry, I was unable to analyze the shader at this time.';
    } finally {
      this.isExplanationLoading = false;
    }
  }

  static styles = css`
    :host {
      --accent-color: #a0d0ff;
      --accent-color-light: #c0e0ff;
      --accent-color-translucent: rgba(160, 208, 255, 0.2);
      --accent-color-translucent-heavy: rgba(160, 208, 255, 0.5);
      --bg-color-translucent: rgba(10, 25, 40, 0.5);
      --border-color: rgba(160, 208, 255, 0.2);

      display: block;
      width: 100%;
      height: 100%;
      position: relative;
      font-family: 'Exo 2', sans-serif;
      background: #060914;
      color: var(--accent-color);
      font-weight: 300;
    }

    axee-visuals-3d {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 1;
    }

    .overlay {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 2;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      pointer-events: none;
      padding: 1rem;
    }

    .main-title {
      position: absolute;
      top: 2rem;
      left: 2rem;
      pointer-events: none;
      text-transform: uppercase;
      color: var(--accent-color-light);
    }

    .main-title h1 {
      font-size: clamp(1.5rem, 4vw, 2.5rem);
      font-weight: 400;
      margin: 0;
      letter-spacing: 0.2em;
      text-shadow: 0 0 15px var(--accent-color-translucent-heavy);
    }

    .main-title h2 {
      font-size: clamp(0.8rem, 2vw, 1rem);
      font-weight: 300;
      margin: 0;
      letter-spacing: 0.4em;
      opacity: 0.8;
    }

    .top-right-controls {
      position: absolute;
      top: 2rem;
      right: 2rem;
      pointer-events: all;
      display: flex;
      flex-direction: column;
      align-items: flex-end;
      gap: 1rem;
      background: var(--bg-color-translucent);
      border: 1px solid var(--border-color);
      backdrop-filter: blur(5px);
      padding: 0.5rem;
      transition: max-height 0.5s ease;
      overflow: hidden;
      width: 450px;
    }

    .panel-header {
      width: 100%;
      display: flex;
      justify-content: space-between;
      align-items: center;
      cursor: pointer;
    }

    .panel-header h3 {
      text-transform: uppercase;
      letter-spacing: 0.2em;
      font-weight: 400;
      margin: 0;
      font-size: 0.9rem;
      padding-bottom: 0;
      border-bottom: none;
    }

    .minimize-btn {
      background: none;
      border: none;
      color: var(--accent-color);
      font-size: 1.5rem;
      line-height: 1;
      cursor: pointer;
      opacity: 0.6;
      transition: opacity 0.3s;
      padding: 0 0.5rem;
    }
    .minimize-btn:hover {
      opacity: 1;
    }

    .top-right-controls.minimized .controls-content {
      max-height: 0;
      padding-top: 0;
      padding-bottom: 0;
      opacity: 0;
    }
    .controls-content {
      width: 100%;
      display: flex;
      flex-direction: column;
      align-items: flex-start;
      gap: 1rem;
      max-height: 500px;
      transition: max-height 0.5s ease, padding 0.5s ease, opacity 0.3s ease;
    }

    .system-buttons {
      display: flex;
      gap: 1rem;
      padding-bottom: 1rem;
      border-bottom: 1px solid var(--border-color);
      width: 100%;
    }

    .header-button {
      font-family: 'Exo 2', sans-serif;
      background: transparent;
      border: 1px solid var(--border-color);
      color: var(--accent-color);
      padding: 0.3rem 0.8rem;
      font-size: 0.9rem;
      cursor: pointer;
      transition: background 0.3s, color 0.3s;
    }
    .header-button:hover {
      background: var(--accent-color-translucent);
      color: var(--accent-color-light);
    }

    .filter-controls {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 1rem 1.5rem;
      width: 100%;
    }
    .filter-group {
      display: flex;
      flex-direction: column;
      gap: 0.3rem;
    }
    .filter-controls label {
      font-size: 0.8rem;
      opacity: 0.7;
      text-transform: uppercase;
    }
    .filter-controls select,
    .filter-controls input[type='text'] {
      width: 100%;
      font-family: 'Exo 2', sans-serif;
      background: transparent;
      border: none;
      border-bottom: 1px solid var(--border-color);
      color: var(--accent-color);
      padding: 0.3rem 0.5rem;
      font-size: 0.9rem;
      transition: border-color 0.3s, box-shadow 0.3s;
    }
    .filter-controls input[type='text'] {
      cursor: text;
    }
    .filter-controls input[type='text']::placeholder {
      color: var(--accent-color);
      opacity: 0.4;
    }
    .filter-controls select {
      cursor: pointer;
      -webkit-appearance: none;
      -moz-appearance: none;
      appearance: none;
      background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='%23a0d0ff' viewBox='0 0 16 16'%3E%3Cpath fill-rule='evenodd' d='M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z'/%3E%3C/svg%3E");
      background-repeat: no-repeat;
      background-position: right 0.5rem center;
      padding-right: 2rem;
    }
    .filter-controls select:focus,
    .filter-controls select:hover,
    .filter-controls input[type='text']:focus,
    .filter-controls input[type='text']:hover {
      outline: none;
      border-bottom-color: var(--accent-color);
      box-shadow: 0 2px 10px rgba(160, 208, 255, 0.2);
    }
    option {
      background: #060914;
      color: var(--accent-color);
    }

    .planetary-system-panel {
      position: absolute;
      top: 9rem;
      left: 2rem;
      width: clamp(240px, 22vw, 320px);
      pointer-events: all;
      color: var(--accent-color);
      opacity: 1;
      transform: translateX(0);
      transition: opacity 0.5s ease, transform 0.5s ease, max-height 0.5s ease;
      overflow: hidden;
      max-height: 500px; /* Adjust as needed */
    }
    .planetary-system-panel.hidden {
      opacity: 0;
      transform: translateX(-20px);
      pointer-events: none;
    }
    .planetary-system-panel.minimized {
      max-height: 40px; /* Height of the header */
    }
    .planetary-system-panel.minimized .panel-content {
      opacity: 0;
    }

    .panel-content {
      transition: opacity 0.3s ease;
      padding-top: 1rem;
    }

    .planetary-system-panel::before {
      content: '';
      position: absolute;
      top: 0;
      left: -10px;
      width: 40px;
      height: calc(100% + 10px);
      border-left: 1px solid var(--border-color);
      border-top: 1px solid var(--border-color);
      border-top-left-radius: 15px;
    }

    .planetary-system-panel h3 {
      text-transform: uppercase;
      letter-spacing: 0.2em;
      font-weight: 400;
      margin: 0;
      padding-bottom: 0.5rem;
      border-bottom: 1px solid var(--border-color);
    }

    .planetary-system-panel ul {
      list-style: none;
      padding: 0;
      margin: 0;
      max-height: 200px;
      overflow-y: auto;
    }

    .planetary-system-panel li {
      margin-bottom: 0.7rem;
      border-bottom: 1px solid transparent;
      padding-bottom: 0.7rem;
      opacity: 0.7;
      transition: opacity 0.3s;
      font-size: 0.9rem;
    }

    .planetary-system-panel li:hover {
      opacity: 1;
    }

    .planetary-system-panel li span {
      margin-right: 1rem;
      opacity: 0.6;
    }
    .planetary-system-panel li:not(:last-child) {
      border-bottom: 1px solid rgba(160, 208, 255, 0.1);
    }

    .planet-detail-panel {
      position: absolute;
      top: 9rem;
      left: 2rem;
      width: clamp(240px, 22vw, 320px);
      max-height: calc(100vh - 18rem);
      overflow-y: auto;
      pointer-events: none;
      opacity: 0;
      transform: translateX(-20px);
      transition: opacity 0.5s ease, transform 0.5s ease, max-height 0.5s ease;
      background: var(--bg-color-translucent);
      border: 1px solid var(--border-color);
      backdrop-filter: blur(5px);
      color: var(--accent-color);
    }

    .planet-detail-panel.visible {
      pointer-events: all;
      opacity: 1;
      transform: translateX(0);
    }
    .planet-detail-panel.minimized {
      max-height: 50px;
      overflow: hidden;
    }
    .planet-detail-panel.minimized .panel-content-details {
      opacity: 0;
      max-height: 0;
    }

    .panel-actions {
      display: flex;
      gap: 1rem;
      margin-bottom: 1.5rem;
    }

    .panel-action-button {
      font-family: 'Exo 2', sans-serif;
      background: transparent;
      border: 1px solid var(--border-color);
      color: var(--accent-color);
      padding: 0.5rem 1rem;
      cursor: pointer;
      font-size: 0.9rem;
      flex-grow: 1;
      text-align: center;
      transition: background 0.3s, color 0.3s;
    }

    .panel-action-button:hover {
      background: var(--accent-color-translucent);
      color: var(--accent-color-light);
    }

    .panel-action-button.back {
      flex-grow: 2; /* Give it more space */
      text-align: left;
    }

    .export-group {
      display: flex;
      flex-grow: 3;
      border: 1px solid var(--border-color);
    }
    .export-group .panel-action-button {
      border: none;
      border-left: 1px solid var(--border-color);
    }
    .export-group .panel-action-button:first-child {
      border-left: none;
    }

    .planet-detail-panel h2 {
      margin: 0 0 0.2rem 0;
      font-size: 1.5rem;
      font-weight: 400;
      color: var(--accent-color-light);
      text-shadow: 0 0 8px var(--accent-color-translucent-heavy);
    }
    .planet-detail-panel h3 {
      margin: 0 0 1rem 0;
      font-size: 1rem;
      font-weight: 300;
      letter-spacing: 0.1em;
      text-transform: uppercase;
      opacity: 0.8;
      padding-bottom: 1rem;
      border-bottom: 1px solid var(--border-color);
    }
    .planet-detail-panel h4 {
      margin: 1.5rem 0 0.8rem 0;
      font-size: 0.9rem;
      font-weight: 400;
      letter-spacing: 0.2em;
      text-transform: uppercase;
      color: var(--accent-color-light);
      padding-bottom: 0.5rem;
      border-bottom: 1px solid var(--border-color);
    }

    .detail-section p,
    .detail-section ul {
      font-size: 0.9rem;
      line-height: 1.6;
      opacity: 0.9;
      margin: 0 0 0.5rem 0;
    }

    .stats-grid {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 0.8rem 1rem;
      margin-bottom: 1rem;
    }
    .stats-grid div {
      font-size: 0.8rem;
    }
    .stats-grid strong {
      display: block;
      font-weight: 300;
      text-transform: uppercase;
      letter-spacing: 0.1em;
      opacity: 0.6;
      margin-bottom: 0.2rem;
    }

    .detail-section ul {
      list-style: none;
      padding-left: 0;
    }
    .detail-section ul li {
      padding-left: 1rem;
      position: relative;
    }
    .detail-section ul li::before {
      content: '»';
      position: absolute;
      left: 0;
      opacity: 0.7;
    }

    .ai-whisper {
      font-style: italic;
      border-left: 2px solid var(--accent-color);
      padding-left: 1rem;
      opacity: 0.8;
    }

    .data-sources a {
      color: var(--accent-color);
      text-decoration: none;
      display: block;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      transition: color 0.3s;
    }
    .data-sources a:hover {
      color: var(--accent-color-light);
    }

    .tech-readout {
      font-family: 'Courier New', Courier, monospace;
      font-size: 0.8rem;
      line-height: 1.5;
      background: rgba(0, 0, 0, 0.2);
      padding: 0.8rem;
      margin-top: 1.5rem;
      border-left: 2px solid var(--border-color);
      display: flex;
      flex-direction: column;
      gap: 0.2rem;
    }
    .tech-log-entry {
      display: flex;
      gap: 0.5rem;
      white-space: nowrap;
      overflow: hidden;
    }
    .tech-log-entry .tech-uri-part {
      color: var(--accent-color);
      opacity: 0.5;
      flex-shrink: 0;
    }
    .tech-log-entry .tech-key {
      opacity: 0.6;
      flex-shrink: 0;
    }
    .tech-log-entry .tech-val {
      color: var(--accent-color-light);
      opacity: 0.9;
      overflow: hidden;
      text-overflow: ellipsis;
    }

    .engine-status-panel {
      position: absolute;
      bottom: 8rem;
      left: 2rem;
      width: clamp(240px, 22vw, 320px);
      pointer-events: all;
      color: var(--accent-color);
      background: var(--bg-color-translucent);
      border: 1px solid var(--border-color);
      backdrop-filter: blur(5px);
      transition: box-shadow 0.5s ease-in-out, border-color 0.5s ease-in-out,
        max-height 0.5s ease;
      overflow: hidden;
      max-height: 800px;
    }
    .engine-status-panel.minimized {
      max-height: 48px; /* Height of header + padding */
    }
    .engine-status-panel.minimized .panel-content {
      opacity: 0;
    }

    .engine-status-panel.active {
      animation: pulse-glow 2.5s infinite alternate ease-in-out;
    }

    @keyframes pulse-glow {
      from {
        box-shadow: 0 0 8px var(--accent-color-translucent);
        border-color: var(--border-color);
      }
      to {
        box-shadow: 0 0 20px var(--accent-color-translucent-heavy);
        border-color: var(--accent-color-light);
      }
    }

    .engine-status-panel h3 {
      text-transform: uppercase;
      letter-spacing: 0.2em;
      font-weight: 400;
      margin: 0;
      font-size: 0.9rem;
      padding-bottom: 0.5rem;
      border-bottom: 1px solid var(--border-color);
    }

    .engine-status-panel .status-line {
      font-size: 1rem;
      margin-bottom: 0.5rem;
      font-weight: 400;
    }

    .engine-status-panel .status-line.ready {
      color: #a0ffd0;
      text-shadow: 0 0 8px #a0ffd0;
    }

    .engine-status-panel p {
      font-size: 0.8rem;
      opacity: 0.7;
      line-height: 1.4;
      margin: 0 0 1rem 0;
    }

    .engine-status-panel p strong {
      font-weight: 400;
      color: var(--accent-color-light);
    }

    .train-button {
      font-family: 'Exo 2', sans-serif;
      background: transparent;
      border: 1px solid var(--accent-color);
      color: var(--accent-color);
      padding: 0.6rem 1rem;
      width: 100%;
      cursor: pointer;
      text-transform: uppercase;
      letter-spacing: 0.1em;
      font-size: 0.9rem;
      transition: background 0.3s, color 0.3s, opacity 0.3s;
    }

    .train-button:hover:not(:disabled) {
      background: var(--accent-color);
      color: #060914;
    }
    .train-button:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }

    .training-controls {
      display: flex;
      flex-direction: column;
      gap: 1rem;
      margin-bottom: 1.5rem;
    }

    .training-controls .control-group {
      display: flex;
      flex-direction: column;
      gap: 0.7rem;
    }

    .training-controls .control-group > label {
      /* Only for the main group label */
      font-size: 0.8rem;
      opacity: 0.7;
      text-transform: uppercase;
      letter-spacing: 0.1em;
      margin-bottom: -0.2rem;
    }

    .training-controls .checkbox-group {
      display: flex;
      align-items: center;
      gap: 0.7rem;
    }

    .training-controls .checkbox-group label {
      font-size: 0.9rem;
      opacity: 0.9;
      cursor: pointer;
    }

    .training-controls input[type='checkbox'] {
      -webkit-appearance: none;
      -moz-appearance: none;
      appearance: none;
      margin: 0;
      font: inherit;
      color: currentColor;
      width: 1.1em;
      height: 1.1em;
      border: 1px solid var(--border-color);
      transform: translateY(-0.075em);
      display: grid;
      place-content: center;
      cursor: pointer;
      transition: background-color 0.2s;
    }

    .training-controls input[type='checkbox']:hover {
      background-color: var(--accent-color-translucent);
    }

    .training-controls input[type='checkbox']::before {
      content: '';
      width: 0.6em;
      height: 0.6em;
      transform: scale(0);
      transition: 120ms transform ease-in-out;
      box-shadow: inset 1em 1em var(--accent-color);
    }

    .training-controls input[type='checkbox']:checked::before {
      transform: scale(1);
    }

    .training-controls select {
      font-family: 'Exo 2', sans-serif;
      background: transparent;
      border: 1px solid var(--border-color);
      color: var(--accent-color);
      padding: 0.5rem;
      font-size: 0.9rem;
      width: 100%;
      transition: border-color 0.3s, box-shadow 0.3s;
    }

    .training-controls select:focus,
    .training-controls select:hover {
      outline: none;
      border-color: var(--accent-color);
      box-shadow: 0 2px 10px rgba(160, 208, 255, 0.2);
    }

    .training-controls option {
      background: #060914;
    }

    .hyperparameter-group {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 0.5rem 1rem;
    }
    .hyperparameter-group > div {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }

    .training-controls input[type='number'] {
      width: 100%;
      font-family: 'Exo 2', sans-serif;
      background: transparent;
      border: 1px solid var(--border-color);
      color: var(--accent-color);
      padding: 0.5rem;
      font-size: 0.9rem;
      transition: border-color 0.3s, box-shadow 0.3s;
      -moz-appearance: textfield;
    }
    .training-controls input[type='number']::-webkit-outer-spin-button,
    .training-controls input[type='number']::-webkit-inner-spin-button {
      -webkit-appearance: none;
      margin: 0;
    }

    .training-controls input[type='number']:focus,
    .training-controls input[type='number']:hover {
      outline: none;
      border-color: var(--accent-color);
      box-shadow: 0 2px 10px rgba(160, 208, 255, 0.2);
    }

    .progress-bar-container {
      width: 100%;
      height: 8px;
      background: var(--accent-color-translucent);
      border: 1px solid var(--border-color);
      margin: 1rem 0;
    }

    .progress-bar {
      width: 0%;
      height: 100%;
      background: var(--accent-color);
      box-shadow: 0 0 8px var(--accent-color);
      transition: width 0.2s linear;
    }

    .training-progress-details {
      display: flex;
      justify-content: space-between;
      align-items: center;
      font-size: 0.8rem;
      opacity: 0.8;
      margin-top: -0.5rem;
      margin-bottom: 0.5rem;
    }

    footer {
      position: absolute;
      bottom: 0;
      left: 0;
      width: 100%;
      padding: 1rem;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 1rem;
      z-index: 5;
    }

    .discovery-controls {
      display: flex;
      align-items: center;
      gap: 1rem;
      pointer-events: all;
    }

    .mode-switch {
      display: flex;
      background: var(--bg-color-translucent);
      border: 1px solid var(--border-color);
    }

    .mode-switch button {
      font-family: 'Exo 2', sans-serif;
      background: transparent;
      border: none;
      color: var(--accent-color);
      padding: 0.8rem 1.2rem;
      cursor: pointer;
      font-size: 1rem;
      font-weight: 300;
      opacity: 0.6;
      transition: opacity 0.3s, background 0.3s;
      border-left: 1px solid var(--border-color);
    }
    .mode-switch button:first-child {
      border-left: none;
    }
    .mode-switch button:hover {
      opacity: 1;
      background: var(--accent-color-translucent);
    }
    .mode-switch button.active {
      background: var(--accent-color-translucent-heavy);
      text-shadow: 0 0 8px var(--accent-color-translucent-heavy);
      opacity: 1;
    }

    .command-bar {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      background: rgba(10, 25, 40, 0.7);
      border: 1px solid var(--border-color);
      backdrop-filter: blur(5px);
      box-shadow: 0 0 15px rgba(0, 0, 0, 0.5);
      padding: 0.5rem;
      width: 700px;
      max-width: 90vw;
    }

    .command-bar input[type='text'] {
      font-family: 'Exo 2', sans-serif;
      background: transparent;
      border: none;
      color: var(--accent-color-light);
      padding: 0.8rem 1rem;
      font-size: 1.1rem;
      flex-grow: 1;
      font-weight: 300;
      text-shadow: 0 0 8px var(--accent-color-translucent);
    }

    .command-bar input[type='text']:focus {
      outline: none;
    }

    .command-bar input[type='text']::placeholder {
      color: var(--accent-color);
      opacity: 0.4;
    }

    .command-button {
      font-family: 'Exo 2', sans-serif;
      background: transparent;
      border: 1px solid var(--border-color);
      color: var(--accent-color);
      padding: 0.8rem 1.5rem;
      cursor: pointer;
      font-size: 1.1rem;
      text-transform: uppercase;
      letter-spacing: 0.1em;
      transition: background 0.3s, color 0.3s, box-shadow 0.3s;
    }
    .command-button:hover:not(:disabled) {
      background: var(--accent-color-translucent-heavy);
      color: var(--accent-color-light);
      box-shadow: 0 0 10px var(--accent-color-translucent);
    }
    .command-button:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }
    .command-button.loading {
      animation: pulse-border 1.5s infinite;
    }

    @keyframes pulse-border {
      0% {
        border-color: var(--border-color);
      }
      50% {
        border-color: var(--accent-color-light);
      }
      100% {
        border-color: var(--border-color);
      }
    }

    .chat-container {
      position: absolute;
      bottom: 8rem;
      left: 50%;
      transform: translateX(-50%);
      width: 700px;
      max-width: 90vw;
      height: 400px;
      background: var(--bg-color-translucent);
      border: 1px solid var(--border-color);
      backdrop-filter: blur(5px);
      display: flex;
      flex-direction: column;
      overflow: hidden;
      z-index: 10;
      opacity: 0;
      animation: fade-in-up 0.5s forwards;
    }

    @keyframes fade-in-up {
      from {
        opacity: 0;
        transform: translate(-50%, 20px);
      }
      to {
        opacity: 1;
        transform: translate(-50%, 0);
      }
    }

    .chat-history {
      flex-grow: 1;
      overflow-y: auto;
      padding: 1rem;
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }

    .chat-message {
      padding: 0.7rem 1.2rem;
      border-radius: 5px;
      max-width: 80%;
      line-height: 1.5;
      font-size: 0.95rem;
      opacity: 0;
      animation: fade-in 0.5s forwards;
    }

    @keyframes fade-in {
      to {
        opacity: 1;
      }
    }

    .chat-message.user {
      background: var(--accent-color-translucent);
      align-self: flex-end;
      text-align: right;
    }

    .chat-message.model {
      background: rgba(0, 0, 0, 0.2);
      align-self: flex-start;
      border: 1px solid var(--border-color);
    }

    .shader-lab-container {
      position: absolute;
      top: 9rem;
      right: 2rem;
      width: clamp(240px, 22vw, 320px);
      background: var(--bg-color-translucent);
      border: 1px solid var(--border-color);
      backdrop-filter: blur(5px);
      padding: 1rem;
      pointer-events: all;
      opacity: 0;
      animation: fade-in-down 0.5s forwards;
    }

    @keyframes fade-in-down {
      from {
        opacity: 0;
        transform: translateY(-20px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    .shader-lab-visualizer {
      width: 100%;
      height: 200px;
      margin-bottom: 1rem;
      border: 1px solid var(--border-color);
      background: #000;
    }

    .shader-lab-controls {
      display: flex;
      flex-direction: column;
      gap: 1.2rem;
    }

    .shader-lab-controls .control-group {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }

    .shader-lab-controls label {
      font-size: 0.8rem;
      opacity: 0.7;
      text-transform: uppercase;
    }
    .shader-lab-controls .value-display {
      float: right;
      font-family: 'Courier New', monospace;
    }

    .shader-lab-controls input[type='color'] {
      -webkit-appearance: none;
      -moz-appearance: none;
      appearance: none;
      width: 100%;
      height: 30px;
      background-color: transparent;
      border: 1px solid var(--border-color);
      cursor: pointer;
    }
    .shader-lab-controls input[type='color']::-webkit-color-swatch-wrapper {
      padding: 0;
    }
    .shader-lab-controls input[type='color']::-webkit-color-swatch {
      border: none;
    }

    .shader-lab-controls input[type='range'] {
      -webkit-appearance: none;
      appearance: none;
      width: 100%;
      height: 2px;
      background: var(--accent-color-translucent);
      outline: none;
      opacity: 0.7;
      transition: opacity 0.2s;
    }
    .shader-lab-controls input[type='range']:hover {
      opacity: 1;
    }
    .shader-lab-controls input[type='range']::-webkit-slider-thumb {
      -webkit-appearance: none;
      appearance: none;
      width: 14px;
      height: 14px;
      background: var(--accent-color);
      cursor: pointer;
      border-radius: 50%;
    }
    .shader-lab-controls input[type='range']::-moz-range-thumb {
      width: 14px;
      height: 14px;
      background: var(--accent-color);
      cursor: pointer;
      border-radius: 50%;
    }

    .shader-lab-controls select {
      width: 100%;
      font-family: 'Exo 2', sans-serif;
      background: transparent;
      border: 1px solid var(--border-color);
      color: var(--accent-color);
      padding: 0.5rem;
      font-size: 0.9rem;
      cursor: pointer;
    }
    .shader-lab-controls option {
      background: #060914;
    }

    .shader-explain-btn {
      width: 100%;
      margin-top: 0.5rem;
    }

    .modal-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(6, 9, 20, 0.8);
      backdrop-filter: blur(10px);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 100;
      opacity: 0;
      pointer-events: none;
      transition: opacity 0.3s ease;
    }

    .modal-overlay.visible {
      opacity: 1;
      pointer-events: all;
    }

    .modal-content {
      background: rgba(10, 25, 40, 0.8);
      border: 1px solid var(--border-color);
      padding: 2rem;
      max-width: 600px;
      width: 90%;
      color: var(--accent-color);
      max-height: 80vh;
      overflow-y: auto;
    }
    .modal-content h2 {
      margin-top: 0;
      color: var(--accent-color-light);
      text-transform: uppercase;
      letter-spacing: 0.1em;
    }
    .modal-content p,
    .modal-content pre {
      line-height: 1.6;
      font-size: 0.95rem;
      opacity: 0.9;
    }
    .modal-content pre {
      background: rgba(0, 0, 0, 0.3);
      padding: 1rem;
      white-space: pre-wrap;
      font-family: 'Courier New', monospace;
    }

    .modal-close-btn {
      float: right;
      background: none;
      border: none;
      color: var(--accent-color);
      font-size: 1.5rem;
      cursor: pointer;
      opacity: 0.6;
      transition: opacity 0.3s;
    }
    .modal-close-btn:hover {
      opacity: 1;
    }

    .loading-spinner {
      border: 2px solid var(--border-color);
      border-top: 2px solid var(--accent-color);
      border-radius: 50%;
      width: 24px;
      height: 24px;
      animation: spin 1s linear infinite;
      margin: 1rem auto;
    }

    @keyframes spin {
      0% {
        transform: rotate(0deg);
      }
      100% {
        transform: rotate(360deg);
      }
    }

    ::-webkit-scrollbar {
      width: 8px;
    }
    ::-webkit-scrollbar-track {
      background: transparent;
    }
    ::-webkit-scrollbar-thumb {
      background: var(--border-color);
    }
    ::-webkit-scrollbar-thumb:hover {
      background: var(--accent-color);
    }
  `;

  private _handleCommandSubmit(e: Event) {
    e.preventDefault();
    if (this.isLoading) return;
    if (this.discoveryMode === 'synthesis') {
      this.synthesizePlanetData(this.userPrompt);
    } else if (this.discoveryMode === 'chat') {
      this.handleChatSubmit();
    }
  }

  private _handleUserPromptInput(e: Event) {
    const input = e.target as HTMLInputElement;
    this.userPrompt = input.value;
  }

  private _changeDiscoveryMode(
    mode: 'synthesis' | 'analysis' | 'chat' | 'shader-lab',
  ) {
    if (this.discoveryMode === mode) return;
    this.discoveryMode = mode;
    this.error = null;
    this.userPrompt = ''; // Clear prompt on mode switch
    // Reset chat if moving away from it
    if (mode !== 'chat' && this.chat) {
      this.chat = null;
      this.chatHistory = [];
    }
  }

  private _handleSelectPreset(e: Event) {
    const select = e.target as HTMLSelectElement;
    const presetName = select.value;
    const preset = this.shaderLabPresets.find((p) => p.name === presetName);
    if (preset) {
      this.selectedPreset = preset.name;
      this.shaderLabColor = preset.color;
      this.shaderLabFresnelPower = preset.fresnelPower;
    }
  }

  private _sharePlanet(planet: PlanetData) {
    try {
      const jsonString = JSON.stringify(planet);
      const encodedData = btoa(jsonString);
      const url = new URL(window.location.href);
      url.hash = `planet_data=${encodedData}`;
      navigator.clipboard.writeText(url.href);
      this.statusMessage = 'Shareable link copied to clipboard!';
      setTimeout(() => {
        this.statusMessage = 'Ready for new command.';
      }, 3000);
    } catch (e) {
      this.error = 'Failed to create shareable link.';
    }
  }

  private _clamp(num: number, min: number, max: number): number {
    return Math.min(Math.max(num, min), max);
  }

  private _handleEpochsInput(e: Event) {
    const input = e.target as HTMLInputElement;
    const value = this._clamp(parseInt(input.value, 10) || 0, 1, 1000);
    this.trainingEpochs = value;
    if (input.value !== String(value)) {
      input.value = String(value);
    }
  }

  private _handleLearningRateInput(e: Event) {
    const input = e.target as HTMLInputElement;
    this.trainingLearningRate = this._clamp(
      parseFloat(input.value) || 0,
      0.00001,
      0.1,
    );
  }

  private _startTraining() {
    this.isTrainingConfirmationOpen = true;
  }

  private _confirmAndStartTraining() {
    this.isTrainingConfirmationOpen = false;
    this.aiModelStatus = 'training';
    this.trainingProgress = 0;
    this.trainingValidationAccuracy = 0;
    this.audioEngine?.playInteractionSound();

    const totalDuration = 15000; // 15 seconds for simulation
    const startTime = Date.now();

    const stages = [
      {
        duration: 3000,
        status: 'Preprocessing Data...',
        sub: 'Loading archives...',
      },
      {duration: 10000, status: 'Fitting Model...', sub: 'Running epochs...'},
      {
        duration: 2000,
        status: 'Finalizing...',
        sub: 'Calculating final accuracy...',
      },
    ];
    let currentStageIndex = 0;
    let stageStartTime = Date.now();

    if (this.trainingInterval) clearInterval(this.trainingInterval);
    this.trainingInterval = setInterval(() => {
      const elapsed = Date.now() - startTime;
      const stageElapsed = Date.now() - stageStartTime;

      if (
        currentStageIndex < stages.length - 1 &&
        stageElapsed > stages[currentStageIndex].duration
      ) {
        currentStageIndex++;
        stageStartTime = Date.now();
      }

      this.trainingStatusMessage = stages[currentStageIndex].status;
      this.trainingSubMessage = stages[currentStageIndex].sub;

      const progress = Math.min((elapsed / totalDuration) * 100, 100);
      this.trainingProgress = progress;

      const timeRemaining = Math.max(0, totalDuration - elapsed);
      this.trainingTimeRemaining = `ETA: ${Math.round(timeRemaining / 1000)}s`;

      // Simulate accuracy increase, mostly during the fitting stage
      if (currentStageIndex === 1) {
        this.trainingValidationAccuracy += Math.random() * 1.5;
        this.trainingValidationAccuracy = Math.min(
          this.trainingValidationAccuracy,
          98.5,
        );
      }

      if (progress >= 100) {
        clearInterval(this.trainingInterval!);
        this.trainingInterval = null;
        this.aiModelStatus = 'ready';
        this.statusMessage = 'AI Model Trained. Ready for synthesis.';
        this.trainingValidationAccuracy = Math.max(
          this.trainingValidationAccuracy,
          95 + Math.random() * 3.5,
        );
        this.trainingValidationAccuracy = Math.min(
          this.trainingValidationAccuracy,
          99.8,
        );
        this.audioEngine?.playSuccessSound();
      }
    }, 100);
  }

  private _resetTraining() {
    this.aiModelStatus = 'untrained';
    this.trainingProgress = 0;
    this.trainingStatusMessage = '';
    this.trainingSubMessage = '';
    this.trainingTimeRemaining = '';
    this.trainingValidationAccuracy = 0;
    if (this.trainingInterval) {
      clearInterval(this.trainingInterval);
      this.trainingInterval = null;
    }
  }

  private renderTopRightControls() {
    return html` <div
      class="top-right-controls ${this.isTopRightPanelMinimized
        ? 'minimized'
        : ''}"
    >
      <div
        class="panel-header"
        @click=${() => {
          this.isTopRightPanelMinimized = !this.isTopRightPanelMinimized;
        }}
      >
        <h3>System Filters</h3>
        <button class="minimize-btn">
          ${this.isTopRightPanelMinimized ? '+' : '−'}
        </button>
      </div>
      <div class="controls-content">
        <div class="system-buttons">
          <button
            class="header-button"
            @click=${() => (this.isAboutModalOpen = true)}
          >
            ABOUT AXEE
          </button>
          <axee-control-tray
            .isMuted=${this.isMuted}
            @toggle-mute=${() => {
              this.isMuted = !this.isMuted;
              this.audioEngine?.playInteractionSound();
            }}
          ></axee-control-tray>
        </div>
        <div class="filter-controls">
          <div class="filter-group">
            <label for="sort-by">Sort By</label>
            <select
              id="sort-by"
              .value=${this.sortBy}
              @change=${(e: Event) =>
                (this.sortBy = (e.target as HTMLSelectElement).value)}
            >
              <option value="discoveryDate_desc">Newest First</option>
              <option value="name_asc">Name (A-Z)</option>
              <option value="name_desc">Name (Z-A)</option>
              <option value="distance_asc">Distance (Near-Far)</option>
              <option value="distance_desc">Distance (Far-Near)</option>
            </select>
          </div>
          <div class="filter-group">
            <label for="life-filter">Life Potential</label>
            <select
              id="life-filter"
              .value=${this.lifeFilter}
              @change=${(e: Event) =>
                (this.lifeFilter = (e.target as HTMLSelectElement).value)}
            >
              <option value="all">All</option>
              <option value="habitable">Habitable</option>
              <option value="potentially-habitable">
                Potentially Habitable
              </option>
              <option value="unlikely">Unlikely</option>
            </select>
          </div>
          <div class="filter-group">
            <label for="type-filter">Planet Type</label>
            <select
              id="type-filter"
              .value=${this.typeFilter}
              @change=${(e: Event) =>
                (this.typeFilter = (e.target as HTMLSelectElement).value)}
            >
              <option value="all">All Types</option>
              <option value="terrestrial-super-earth">Super-Earth</option>
              <option value="terrestrial">Terrestrial</option>
              <option value="gas-giant">Gas Giant</option>
              <option value="ice-giant">Ice Giant</option>
            </select>
          </div>
          <div class="filter-group">
            <label for="feature-filter">Feature Keyword</label>
            <input
              type="text"
              id="feature-filter"
              placeholder="e.g. oxygen, rings"
              .value=${this.featureFilter}
              @input=${(e: Event) =>
                (this.featureFilter = (e.target as HTMLInputElement).value)}
            />
          </div>
        </div>
      </div>
    </div>`;
  }
  private renderPlanetDetail(planet: PlanetData) {
    return html`
      <div
        class="panel-header"
        @click=${() => (this.isLeftPanelMinimized = !this.isLeftPanelMinimized)}
      >
        <h3 style="cursor: pointer;">Stellar Cartography</h3>
        <button class="minimize-btn">
          ${this.isLeftPanelMinimized ? '+' : '−'}
        </button>
      </div>
      <div class="panel-content-details">
        <div class="panel-actions">
          <button
            class="panel-action-button back"
            @click=${() => (this.selectedPlanetId = null)}
          >
            ← System View
          </button>
          <div class="export-group">
            <button
              class="panel-action-button"
              @click=${() => this._sharePlanet(planet)}
              title="Copy shareable link"
            >
              SHARE
            </button>
          </div>
        </div>
        <h2>${planet.planetName}</h2>
        <h3>${planet.starSystem} // ${planet.planetType}</h3>
        <div class="detail-section">
          <p class="ai-whisper">"${planet.aiWhisper}"</p>
          <h4>Planetary Data</h4>
          <div class="stats-grid">
            <div>
              <strong>Star Type</strong>
              <span>${planet.starType}</span>
            </div>
            <div>
              <strong>Distance</strong>
              <span>${planet.distanceLightYears} ly</span>
            </div>
            <div>
              <strong>Orbital Period</strong>
              <span>${planet.orbitalPeriod}</span>
            </div>
            <div>
              <strong>Rotational Period</strong>
              <span>${planet.rotationalPeriod}</span>
            </div>
            <div>
              <strong>Moons</strong>
              <span>${planet.moons.count}</span>
            </div>
            <div>
              <strong>Life Assessment</strong>
              <span class="life-${planet.potentialForLife.assessment
                .toLowerCase()
                .replace(' ', '-')}">
                ${planet.potentialForLife.assessment}
              </span>
            </div>
          </div>
          <h4>Discovery Narrative</h4>
          <p>${planet.discoveryNarrative}</p>
          <h4>Key Features</h4>
          <ul>
            ${planet.keyFeatures.map((feature) => html`<li>${feature}</li>`)}
          </ul>
        </div>
      </div>
    `;
  }
  private renderPlanetList() {
    return html`
      <div
        class="panel-header"
        @click=${() => (this.isLeftPanelMinimized = !this.isLeftPanelMinimized)}
      >
        <h3 style="cursor: pointer;">Discovered Systems</h3>
        <button class="minimize-btn">
          ${this.isLeftPanelMinimized ? '+' : '−'}
        </button>
      </div>
      <div class="panel-content">
        <ul>
          ${this.filteredAndSortedPlanets.map(
            (p) =>
              html`<li>
                <button @click=${() => (this.selectedPlanetId = p.celestial_body_id)}>
                  <span>${p.celestial_body_id.toUpperCase()}</span>
                  ${p.planetName}
                </button>
              </li>`,
          )}
        </ul>
      </div>
    `;
  }
  private renderLeftPanel() {
    const selectedPlanet = this.discoveredPlanets.find(
      (p) => p.celestial_body_id === this.selectedPlanetId,
    );
    return html`
      <div
        class="planet-detail-panel ${selectedPlanet ? 'visible' : ''} ${this
          .isLeftPanelMinimized
          ? 'minimized'
          : ''}"
      >
        ${selectedPlanet
          ? this.renderPlanetDetail(selectedPlanet)
          : this.renderPlanetList()}
      </div>
    `;
  }
  private _renderTrainingConfig() {
    return html`
      <div class="status-line">AI MODEL UNTRAINED</div>
      <p>
        The synthesis engine requires a trained model to generate plausible
        exoplanets. Please configure and begin the training cycle.
      </p>
      <div class="training-controls">
        <div class="control-group">
          <label>Data Sources</label>
          <div class="checkbox-group">
            <input
              type="checkbox"
              id="kepler-data"
              .checked=${this.trainingUseKeplerData}
              @change=${() =>
                (this.trainingUseKeplerData = !this.trainingUseKeplerData)}
            />
            <label for="kepler-data">Kepler Mission Archive</label>
          </div>
          <div class="checkbox-group">
            <input
              type="checkbox"
              id="tess-data"
              .checked=${this.trainingUseTessData}
              @change=${() =>
                (this.trainingUseTessData = !this.trainingUseTessData)}
            />
            <label for="tess-data">TESS Mission Data</label>
          </div>
        </div>
        <div class="control-group">
          <label for="classifier">Classifier Model</label>
          <select
            id="classifier"
            .value=${this.trainingClassifier}
            @change=${(e: Event) =>
              (this.trainingClassifier = (
                e.target as HTMLSelectElement
              ).value as any)}
          >
            <option value="random-forest">Random Forest</option>
            <option value="cnn">Convolutional Neural Net</option>
            <option value="gradient-boosting">Gradient Boosting</option>
          </select>
        </div>
        <div class="hyperparameter-group">
          <div>
            <label for="epochs">Epochs</label>
            <input
              type="number"
              id="epochs"
              min="1"
              max="1000"
              .value=${String(this.trainingEpochs)}
              @input=${this._handleEpochsInput}
            />
          </div>
          <div>
            <label for="learning-rate">Learning Rate</label>
            <input
              type="number"
              id="learning-rate"
              step="0.0001"
              min="0.00001"
              max="0.1"
              .value=${String(this.trainingLearningRate)}
              @input=${this._handleLearningRateInput}
            />
          </div>
        </div>
      </div>
      <button
        class="train-button"
        @click=${this._startTraining}
        ?disabled=${!this.trainingUseKeplerData && !this.trainingUseTessData}
      >
        Begin Training
      </button>
    `;
  }

  private _renderTrainingProgress() {
    return html`
      <div class="status-line">TRAINING IN PROGRESS...</div>
      <p>${this.trainingStatusMessage}</p>
      <div class="progress-bar-container">
        <div
          class="progress-bar"
          style="width: ${this.trainingProgress}%"
        ></div>
      </div>
      <div class="training-progress-details">
        <span>${this.trainingSubMessage}</span>
        <span>${this.trainingTimeRemaining}</span>
      </div>
      <div class="training-progress-details" style="margin-top: 0.5rem;">
        <strong>Validation Accuracy</strong>
        <strong>${this.trainingValidationAccuracy.toFixed(2)}%</strong>
      </div>
    `;
  }

  private _renderTrainingComplete() {
    return html`
      <div class="status-line ready">AI MODEL READY</div>
      <p>
        The model has been successfully trained with a final validation
        accuracy of
        <strong>${this.trainingValidationAccuracy.toFixed(2)}%</strong>. The
        synthesis engine is now online.
      </p>
      <button class="train-button" @click=${this._resetTraining}>
        Re-Train Model
      </button>
    `;
  }
  private renderStatusPanel() {
    return html` <div
      class="engine-status-panel ${this.isLoading ||
      this.aiModelStatus === 'training'
        ? 'active'
        : ''} ${this.isStatusPanelMinimized ? 'minimized' : ''}"
    >
      <div
        class="panel-header"
        @click=${() =>
          (this.isStatusPanelMinimized = !this.isStatusPanelMinimized)}
      >
        <h3>Engine Status</h3>
        <button class="minimize-btn">
          ${this.isStatusPanelMinimized ? '+' : '−'}
        </button>
      </div>
      <div class="panel-content">
        ${this.aiModelStatus === 'untrained'
          ? this._renderTrainingConfig()
          : this.aiModelStatus === 'training'
          ? this._renderTrainingProgress()
          : this._renderTrainingComplete()}
      </div>
    </div>`;
  }

  private renderFooter() {
    const promptPlaceholder =
      this.discoveryMode === 'synthesis'
        ? this.aiModelStatus === 'ready'
          ? 'Describe a planetary concept to synthesize...'
          : 'AI model not ready. Please train the model first.'
        : this.discoveryMode === 'chat'
        ? `Ask a question about ${
            this.discoveredPlanets.find(
              (p) => p.celestial_body_id === this.selectedPlanetId,
            )?.planetName
          }...`
        : 'Commands disabled in this mode.';

    const buttonText =
      this.discoveryMode === 'synthesis'
        ? 'Synthesize'
        : this.discoveryMode === 'chat'
        ? 'Send'
        : '...';

    return html`
      <footer>
        <div class="discovery-controls">
          <div class="mode-switch">
            <button
              class=${this.discoveryMode === 'synthesis' ? 'active' : ''}
              @click=${() => this._changeDiscoveryMode('synthesis')}
              title="Generate new planets from a text prompt"
            >
              Synthesis
            </button>
            <button
              class=${this.discoveryMode === 'chat' ? 'active' : ''}
              @click=${() => this._changeDiscoveryMode('chat')}
              ?disabled=${!this.selectedPlanetId}
              title="Chat with an AI about the selected planet"
            >
              Chat
            </button>
            <button
              class=${this.discoveryMode === 'shader-lab' ? 'active' : ''}
              @click=${() => this._changeDiscoveryMode('shader-lab')}
              title="Experiment with atmosphere shaders"
            >
              Shader Lab
            </button>
          </div>
        </div>
        ${this.discoveryMode === 'synthesis' || this.discoveryMode === 'chat'
          ? html`
              <form class="command-bar" @submit=${this._handleCommandSubmit}>
                <input
                  type="text"
                  placeholder=${promptPlaceholder}
                  .value=${this.userPrompt}
                  @input=${this._handleUserPromptInput}
                  ?disabled=${this.isLoading ||
                  (this.discoveryMode === 'chat' && !this.selectedPlanetId) ||
                  (this.discoveryMode === 'synthesis' &&
                    this.aiModelStatus !== 'ready')}
                />
                <button
                  type="submit"
                  class="command-button ${this.isLoading ? 'loading' : ''}"
                  ?disabled=${this.isLoading ||
                  !this.userPrompt.trim() ||
                  (this.discoveryMode === 'synthesis' &&
                    this.aiModelStatus !== 'ready')}
                >
                  ${buttonText}
                </button>
              </form>
            `
          : nothing}
      </footer>
    `;
  }
  private renderChat() {
    return html` <div class="chat-container">
      <div class="chat-history">
        ${this.chatHistory.map(
          (msg) =>
            html`<div class="chat-message ${msg.role}">${unsafeHTML(msg.text)}</div>`,
        )}
        ${this.isLoading
          ? html`<div class="loading-spinner"></div>`
          : nothing}
      </div>
    </div>`;
  }
  private renderShaderLab() {
    return html`
      <div class="shader-lab-container">
        <h3>Atmosphere Shader Lab</h3>
        <div class="shader-lab-visualizer">
          <shader-lab-visualizer
            .atmosphereColor=${this.shaderLabColor}
            .fresnelPower=${this.shaderLabFresnelPower}
          ></shader-lab-visualizer>
        </div>
        <div class="shader-lab-controls">
          <div class="control-group">
            <label for="shader-preset">Preset</label>
            <select
              id="shader-preset"
              .value=${this.selectedPreset}
              @change=${this._handleSelectPreset}
            >
              ${this.shaderLabPresets.map(
                (p) => html`<option .value=${p.name}>${p.name}</option>`,
              )}
            </select>
          </div>
          <div class="control-group">
            <label for="shader-color">Glow Color</label>
            <input
              type="color"
              id="shader-color"
              .value=${this.shaderLabColor}
              @input=${(e: Event) =>
                (this.shaderLabColor = (e.target as HTMLInputElement).value)}
            />
          </div>
          <div class="control-group">
            <label for="shader-fresnel">
              Fresnel Power
              <span class="value-display"
                >${this.shaderLabFresnelPower.toFixed(1)}</span
              >
            </label>
            <input
              type="range"
              id="shader-fresnel"
              min="1.0"
              max="10.0"
              step="0.1"
              .value=${this.shaderLabFresnelPower}
              @input=${(e: Event) =>
                (this.shaderLabFresnelPower = parseFloat(
                  (e.target as HTMLInputElement).value,
                ))}
            />
          </div>
          <button
            class="header-button shader-explain-btn"
            @click=${() => {
              this.isExplanationModalOpen = true;
              this.handleExplainShader();
            }}
          >
            Explain Shader
          </button>
        </div>
      </div>
    `;
  }
  private renderAboutModal() {
    return html`<div
      class="modal-overlay ${this.isAboutModalOpen ? 'visible' : ''}"
      @click=${() => (this.isAboutModalOpen = false)}
    >
      <div class="modal-content" @click=${(e: Event) => e.stopPropagation()}>
        <button
          class="modal-close-btn"
          @click=${() => (this.isAboutModalOpen = false)}
        >
          &times;
        </button>
        <h2>About AXEE</h2>
        <p>
          The AURELION Exoplanet Synthesis Engine (AXEE) is an experimental
          interface for generating and exploring fictional worlds using generative
          AI.
        </p>
        <p>
          Powered by Google's Gemini models, AXEE translates creative concepts
          into detailed, scientifically-plausible exoplanet profiles, complete
          with procedural visualizations. It serves as a demonstration of
          AI-driven content creation and interactive data exploration.
        </p>
      </div>
    </div>`;
  }
  private renderShaderExplanationModal() {
    return html` <div
      class="modal-overlay ${this.isExplanationModalOpen ? 'visible' : ''}"
      @click=${() => (this.isExplanationModalOpen = false)}
    >
      <div class="modal-content" @click=${(e: Event) => e.stopPropagation()}>
        <button
          class="modal-close-btn"
          @click=${() => (this.isExplanationModalOpen = false)}
        >
          &times;
        </button>
        <h2>Shader Analysis</h2>
        ${this.isExplanationLoading
          ? html`<div class="loading-spinner"></div>`
          : html`<p>${unsafeHTML(this.shaderLabExplanation)}</p>`}
      </div>
    </div>`;
  }
  private renderTrainingConfirmationModal() {
    return html`<div
      class="modal-overlay ${this.isTrainingConfirmationOpen ? 'visible' : ''}"
      @click=${() => (this.isTrainingConfirmationOpen = false)}
    >
      <div class="modal-content" @click=${(e: Event) => e.stopPropagation()}>
        <button
          class="modal-close-btn"
          @click=${() => (this.isTrainingConfirmationOpen = false)}
        >
          &times;
        </button>
        <h2>Confirm Training Cycle</h2>
        <p>
          You are about to begin a new AI model training cycle with the
          following configuration. This process is simulated and will take
          approximately 15 seconds.
        </p>
        <div class="stats-grid" style="margin-top: 1.5rem;">
          <div>
            <strong>Data Sources</strong>
            <span
              >${[
                this.trainingUseKeplerData && 'Kepler',
                this.trainingUseTessData && 'TESS',
              ]
                .filter(Boolean)
                .join(' + ')}</span
            >
          </div>
          <div>
            <strong>Classifier</strong>
            <span
              >${this.trainingClassifier
                .replace('-', ' ')
                .replace(/\b\w/g, (l) => l.toUpperCase())}</span
            >
          </div>
          <div>
            <strong>Epochs</strong>
            <span>${this.trainingEpochs}</span>
          </div>
          <div>
            <strong>Learning Rate</strong>
            <span>${this.trainingLearningRate}</span>
          </div>
        </div>
        <div style="display: flex; gap: 1rem; margin-top: 2rem;">
          <button
            class="panel-action-button"
            style="flex-grow: 2;"
            @click=${() => (this.isTrainingConfirmationOpen = false)}
          >
            Cancel
          </button>
          <button
            class="panel-action-button"
            style="background: var(--accent-color-translucent);"
            @click=${this._confirmAndStartTraining}
          >
            Confirm & Begin
          </button>
        </div>
      </div>
    </div>`;
  }
  render() {
    return html`
      <axee-audio-engine
        .mood=${this.currentMood}
        .muted=${this.isMuted}
      ></axee-audio-engine>

      <axee-visuals-3d
        .planetsData=${this.filteredAndSortedPlanets}
        .selectedPlanetId=${this.selectedPlanetId}
        .viewMode=${this.visualsViewMode}
        @planet-selected=${(e: CustomEvent) => {
          this.selectedPlanetId = e.detail.planetId;
          this.audioEngine.playInteractionSound();
          if (this.discoveryMode === 'chat') {
            // Reset chat on planet change
            this.chat = null;
            this.chatHistory = [];
          }
        }}
      ></axee-visuals-3d>

      <div class="main-title">
        <h1>AURELION</h1>
        <h2>Exoplanet Synthesis Engine</h2>
      </div>

      ${this.renderTopRightControls()} ${this.renderLeftPanel()}
      ${this.renderStatusPanel()}

      <light-curve-visualizer
        ?isActive=${this.isAnalyzingData}
      ></light-curve-visualizer>

      ${this.renderFooter()}
      ${this.discoveryMode === 'chat' && this.selectedPlanetId
        ? this.renderChat()
        : nothing}
      ${this.discoveryMode === 'shader-lab' ? this.renderShaderLab() : nothing}
      ${this.renderAboutModal()} ${this.renderShaderExplanationModal()}
      ${this.renderTrainingConfirmationModal()}
    `;
  }
}