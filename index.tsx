/* tslint:disable */
/**
 * @license
 * SPDX-License-Identifier: Apache-2.0
 */

import {GoogleGenAI, Chat} from '@google/genai';
import {LitElement, css, html, nothing} from 'lit';
import {customElement, state, query} from 'lit/decorators.js';
import {unsafeHTML} from 'lit/directives/unsafe-html.js';
import './visual-3d';
import {AxeeVisuals3D} from './visual-3d';
import {AxeeAudioEngine} from './audio-engine';
import './light-curve-visualizer';
import './ControlTray.tsx';
import './shader-lab-visualizer.tsx';
import {
  vs as atmosphereVs,
  fs as atmosphereFs,
} from './atmosphere-shader.tsx';

declare global {
  interface Window {
    electronAPI: {
      getApiKey: () => Promise<string>;
    };
  }
}

export interface PlanetData {
  id?: string; // UUID, formerly from Supabase
  created_at?: string; // Timestamp, formerly from Supabase
  celestial_body_id: string; // Unique ID generated by the app
  planetName: string;
  starSystem: string;
  starType: string;
  distanceLightYears: number;
  planetType: string;
  rotationalPeriod: string;
  orbitalPeriod: string;
  moons: {
    count: number;
    names: string[];
  };
  potentialForLife: {
    assessment: string; // e.g., 'Habitable', 'Potentially Habitable', 'Unlikely'
    reasoning: string;
    biosignatures: string[];
  };
  discoveryNarrative: string;
  discoveryMethodology: string;
  atmosphericComposition: string;
  surfaceFeatures: string;
  keyFeatures: string[];
  aiWhisper: string;
  visualization: {
    color1: string;
    color2: string;
    oceanColor: string;
    atmosphereColor: string;
    hasRings: boolean;
    cloudiness: number;
    iceCoverage: number;
    surfaceTexture: string;
  };
  groundingChunks?: GroundingChunk[];
}

export interface GroundingChunk {
  web?: {
    uri?: string;
    title?: string;
  };
}

export type MusicMood = 'galaxy' | 'serene' | 'tense' | 'mysterious' | 'off';

// Initial data to populate the app without a database.
const MOCK_PLANET: PlanetData = {
  id: 'axee-00001',
  created_at: new Date().toISOString(),
  celestial_body_id: 'axee-00001',
  planetName: 'Aethelgard',
  starSystem: 'Cygni-B7',
  starType: 'K-type orange dwarf',
  distanceLightYears: 42.7,
  planetType: 'Terrestrial Super-Earth',
  rotationalPeriod: '36.2 Earth hours',
  orbitalPeriod: '289.5 Earth days',
  moons: {
    count: 2,
    names: ['Aethel', 'Gard'],
  },
  potentialForLife: {
    assessment: 'Potentially Habitable',
    reasoning:
      'Located within the habitable zone with a dense, nitrogen-oxygen atmosphere. Evidence of liquid water on the surface.',
    biosignatures: ['Oxygen', 'Methane (trace)'],
  },
  discoveryNarrative:
    'A faint, periodic dip in the light curve of Cygni-B7 hinted at a transiting world. Follow-up observations confirmed a super-earth with a significant atmosphere, a prime candidate in the search for life.',
  discoveryMethodology:
    'Transit method via TESS, confirmed with radial velocity measurements.',
  atmosphericComposition:
    '72% Nitrogen, 26% Oxygen, 2% Argon and other trace gases.',
  surfaceFeatures:
    'Vast, shallow oceans dotted with volcanic archipelagos. The continents are covered in a dense, reddish-purple flora.',
  keyFeatures: [
    'Extensive liquid water oceans',
    'Oxygen-rich atmosphere',
    'Photosynthetic life',
  ],
  aiWhisper:
    'A world painted in violet and teal, where twin moons dance in a wine-dark sea.',
  visualization: {
    color1: '#884466', // Purple-ish land
    color2: '#CC6688', // Lighter highlights
    oceanColor: '#1E4A6D', // Deep blue ocean
    atmosphereColor: '#A0D0FF', // Earth-like atmosphere
    hasRings: false,
    cloudiness: 0.4,
    iceCoverage: 0.1,
    surfaceTexture: 'TERRESTRIAL',
  },
};

@customElement('axee-interface')
export class AxeeInterface extends LitElement {
  @state() private isLoading = false;
  @state() private statusMessage = 'Awaiting Synthesis Command';
  @state() private discoveredPlanets: PlanetData[] = [MOCK_PLANET];
  @state() private selectedPlanetId: string | null = null;
  @state() private error: string | null = null;
  @state() private userPrompt = '';
  @state() private hasStartedDiscovery = false;
  @state() private isAboutModalOpen = false;

  // Audio & Voice states
  @state() private isSpeaking = false;
  @state() private isMuted = false;
  @state() private currentMood: MusicMood = 'off';
  @state() private hasInteracted = false;

  // Filtering & Sorting states
  @state() private lifeFilter = 'all';
  @state() private typeFilter = 'all';
  @state() private sortBy = 'discoveryDate_desc';
  @state() private featureFilter = '';

  // New discovery mode states
  @state() private discoveryMode:
    | 'synthesis'
    | 'analysis'
    | 'chat'
    | 'shader-lab' = 'synthesis';
  @state() private isAnalyzingData = false;

  // UI State
  @state() private isLeftPanelMinimized = false;
  @state() private isStatusPanelMinimized = false;
  @state() private isTopRightPanelMinimized = false;
  @state() private visualsViewMode: 'single' | 'quad' = 'quad';

  // AI Model Training states
  @state() private aiModelStatus: 'untrained' | 'training' | 'ready' =
    'untrained';
  @state() private trainingProgress = 0;
  @state() private trainingStatusMessage = '';
  @state() private trainingUseKeplerData = true;
  @state() private trainingUseTessData = true;
  @state() private trainingClassifier:
    | 'random-forest'
    | 'cnn'
    | 'gradient-boosting' = 'random-forest';
  @state() private trainingEpochs = 50;
  @state() private trainingLearningRate = 0.001;
  @state() private trainingBatchSize = 64;
  @state() private trainingValidationAccuracy = 0;
  private trainingInterval: ReturnType<typeof setInterval> | null = null;

  // Chat states
  @state() private chatHistory: {role: 'user' | 'model'; text: string}[] = [];
  private chat: Chat | null = null;

  // Shader Lab states
  @state() private shaderLabColor = '#a0d0ff';
  @state() private shaderLabFresnelPower = 4.0;
  @state() private shaderLabExplanation = '';
  @state() private isExplanationLoading = false;
  @state() private isExplanationModalOpen = false;
  @state()
  private shaderLabPresets: {
    name: string;
    color: string;
    fresnelPower: number;
  }[] = [
    {name: 'Default Cyan', color: '#a0d0ff', fresnelPower: 4.0},
    {name: 'Solar Flare', color: '#ff8844', fresnelPower: 8.0},
    {name: 'Nebula Green', color: '#44ffaa', fresnelPower: 2.5},
  ];
  @state() private selectedPreset = 'Default Cyan';

  @query('axee-audio-engine') private audioEngine!: AxeeAudioEngine;

  private ai!: GoogleGenAI;
  private discoveryInterval: ReturnType<typeof setInterval> | null = null;

  private triggerHaptic(pattern: number | number[] = 5): void {
    if (window.navigator && 'vibrate' in window.navigator) {
      try {
        window.navigator.vibrate(pattern);
      } catch (e) {
        console.warn('Haptic feedback failed.', e);
      }
    }
  }

  constructor() {
    super();
    this.initAI()
      .then(() => {
        this.statusMessage = `${this.discoveredPlanets.length} systems loaded from local memory.`;
      })
      .catch((err) => {
        console.error('AI Initialization failed:', err);
        this.statusMessage =
          'Error: AI failed to initialize. API Key might be missing.';
        this.error = 'AI Initialization failed. Check the .env file.';
      });
  }

  private async initAI() {
    let apiKey: string | undefined;
    // Check if running in Electron by looking for the exposed API
    if (window.electronAPI) {
      apiKey = await window.electronAPI.getApiKey();
      if (!apiKey) {
        throw new Error('API_KEY not found. Please set it in the .env file.');
      }
    } else {
      // Fallback for browser environment where the key is expected via process.env
      // This might not be set up in a simple browser serve, so we warn the user.
      apiKey = process.env.API_KEY;
      if (!apiKey) {
        console.warn(
          'API_KEY not found in process.env. The app may not function correctly in a standard browser environment without it.',
        );
        throw new Error('API Key is not configured for browser environment.');
      }
    }
    this.ai = new GoogleGenAI({apiKey});
  }

  connectedCallback() {
    super.connectedCallback();
  }

  disconnectedCallback() {
    super.disconnectedCallback();
    if (this.discoveryInterval) {
      clearInterval(this.discoveryInterval);
    }
    if (this.trainingInterval) {
      clearInterval(this.trainingInterval);
    }
  }

  private get filteredAndSortedPlanets() {
    let filteredPlanets = [...this.discoveredPlanets];

    // Filter by life potential
    if (this.lifeFilter !== 'all') {
      filteredPlanets = filteredPlanets.filter(
        (p) =>
          p.potentialForLife.assessment.replace(/ /g, '-').toLowerCase() ===
          this.lifeFilter,
      );
    }

    // Filter by planet type
    if (this.typeFilter !== 'all') {
      filteredPlanets = filteredPlanets.filter(
        (p) =>
          p.planetType.replace(/ /g, '-').toLowerCase() === this.typeFilter,
      );
    }

    // Filter by feature keyword
    const featureQuery = this.featureFilter.trim().toLowerCase();
    if (featureQuery) {
      filteredPlanets = filteredPlanets.filter((p) =>
        p.keyFeatures.some((feature) =>
          feature.toLowerCase().includes(featureQuery),
        ),
      );
    }

    // Sorting
    filteredPlanets.sort((a, b) => {
      switch (this.sortBy) {
        case 'name_asc':
          return a.planetName.localeCompare(b.planetName);
        case 'name_desc':
          return b.planetName.localeCompare(a.planetName);
        case 'distance_asc':
          return a.distanceLightYears - b.distanceLightYears;
        case 'distance_desc':
          return b.distanceLightYears - a.distanceLightYears;
        case 'discoveryDate_desc': // Default
        default:
          return (
            new Date(b.created_at!).getTime() -
            new Date(a.created_at!).getTime()
          );
      }
    });

    return filteredPlanets;
  }

  static styles = css`
    :host {
      --accent-color: #a0d0ff;
      --accent-color-light: #c0e0ff;
      --accent-color-translucent: rgba(160, 208, 255, 0.2);
      --accent-color-translucent-heavy: rgba(160, 208, 255, 0.5);
      --bg-color-translucent: rgba(10, 25, 40, 0.5);
      --border-color: rgba(160, 208, 255, 0.2);

      display: block;
      width: 100%;
      height: 100%;
      position: relative;
      font-family: 'Exo 2', sans-serif;
      background: #060914;
      color: var(--accent-color);
      font-weight: 300;
    }

    axee-visuals-3d {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 1;
    }

    .overlay {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      z-index: 2;
      display: flex;
      flex-direction: column;
      justify-content: space-between;
      pointer-events: none;
      padding: 1rem;
    }

    .main-title {
      position: absolute;
      top: 2rem;
      left: 2rem;
      pointer-events: none;
      text-transform: uppercase;
      color: var(--accent-color-light);
    }

    .main-title h1 {
      font-size: clamp(1.5rem, 4vw, 2.5rem);
      font-weight: 400;
      margin: 0;
      letter-spacing: 0.2em;
      text-shadow: 0 0 15px var(--accent-color-translucent-heavy);
    }

    .main-title h2 {
      font-size: clamp(0.8rem, 2vw, 1rem);
      font-weight: 300;
      margin: 0;
      letter-spacing: 0.4em;
      opacity: 0.8;
    }

    .top-right-controls {
      position: absolute;
      top: 2rem;
      right: 2rem;
      pointer-events: all;
      display: flex;
      flex-direction: column;
      align-items: flex-end;
      gap: 1rem;
      background: var(--bg-color-translucent);
      border: 1px solid var(--border-color);
      backdrop-filter: blur(5px);
      padding: 0.5rem;
      transition: max-height 0.5s ease;
      overflow: hidden;
      width: 450px;
    }

    .panel-header {
      width: 100%;
      display: flex;
      justify-content: space-between;
      align-items: center;
      cursor: pointer;
    }

    .panel-header h3 {
      text-transform: uppercase;
      letter-spacing: 0.2em;
      font-weight: 400;
      margin: 0;
      font-size: 0.9rem;
      padding-bottom: 0;
      border-bottom: none;
    }

    .minimize-btn {
      background: none;
      border: none;
      color: var(--accent-color);
      font-size: 1.5rem;
      line-height: 1;
      cursor: pointer;
      opacity: 0.6;
      transition: opacity 0.3s;
      padding: 0 0.5rem;
    }
    .minimize-btn:hover {
      opacity: 1;
    }

    .top-right-controls.minimized .controls-content {
      max-height: 0;
      padding-top: 0;
      padding-bottom: 0;
      opacity: 0;
    }
    .controls-content {
      width: 100%;
      display: flex;
      flex-direction: column;
      align-items: flex-start;
      gap: 1rem;
      max-height: 500px;
      transition: max-height 0.5s ease, padding 0.5s ease, opacity 0.3s ease;
    }

    .system-buttons {
      display: flex;
      gap: 1rem;
      padding-bottom: 1rem;
      border-bottom: 1px solid var(--border-color);
      width: 100%;
    }

    .header-button {
      font-family: 'Exo 2', sans-serif;
      background: transparent;
      border: 1px solid var(--border-color);
      color: var(--accent-color);
      padding: 0.3rem 0.8rem;
      font-size: 0.9rem;
      cursor: pointer;
      transition: background 0.3s, color 0.3s;
    }
    .header-button:hover {
      background: var(--accent-color-translucent);
      color: var(--accent-color-light);
    }

    .filter-controls {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 1rem 1.5rem;
      width: 100%;
    }
    .filter-group {
      display: flex;
      flex-direction: column;
      gap: 0.3rem;
    }
    .filter-controls label {
      font-size: 0.8rem;
      opacity: 0.7;
      text-transform: uppercase;
    }
    .filter-controls select,
    .filter-controls input[type='text'] {
      width: 100%;
      font-family: 'Exo 2', sans-serif;
      background: transparent;
      border: none;
      border-bottom: 1px solid var(--border-color);
      color: var(--accent-color);
      padding: 0.3rem 0.5rem;
      font-size: 0.9rem;
      transition: border-color 0.3s, box-shadow 0.3s;
    }
    .filter-controls input[type='text'] {
      cursor: text;
    }
    .filter-controls input[type='text']::placeholder {
      color: var(--accent-color);
      opacity: 0.4;
    }
    .filter-controls select {
      cursor: pointer;
      -webkit-appearance: none;
      -moz-appearance: none;
      appearance: none;
      background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='16' height='16' fill='%23a0d0ff' viewBox='0 0 16 16'%3E%3Cpath fill-rule='evenodd' d='M1.646 4.646a.5.5 0 0 1 .708 0L8 10.293l5.646-5.647a.5.5 0 0 1 .708.708l-6 6a.5.5 0 0 1-.708 0l-6-6a.5.5 0 0 1 0-.708z'/%3E%3C/svg%3E");
      background-repeat: no-repeat;
      background-position: right 0.5rem center;
      padding-right: 2rem;
    }
    .filter-controls select:focus,
    .filter-controls select:hover,
    .filter-controls input[type='text']:focus,
    .filter-controls input[type='text']:hover {
      outline: none;
      border-bottom-color: var(--accent-color);
      box-shadow: 0 2px 10px rgba(160, 208, 255, 0.2);
    }
    option {
      background: #060914;
      color: var(--accent-color);
    }

    .planetary-system-panel {
      position: absolute;
      top: 9rem;
      left: 2rem;
      width: clamp(240px, 22vw, 320px);
      pointer-events: all;
      color: var(--accent-color);
      opacity: 1;
      transform: translateX(0);
      transition: opacity 0.5s ease, transform 0.5s ease, max-height 0.5s ease;
      overflow: hidden;
      max-height: 500px; /* Adjust as needed */
    }
    .planetary-system-panel.hidden {
      opacity: 0;
      transform: translateX(-20px);
      pointer-events: none;
    }
    .planetary-system-panel.minimized {
      max-height: 40px; /* Height of the header */
    }
    .planetary-system-panel.minimized .panel-content {
      opacity: 0;
    }

    .panel-content {
      transition: opacity 0.3s ease;
      padding-top: 1rem;
    }

    .planetary-system-panel::before {
      content: '';
      position: absolute;
      top: 0;
      left: -10px;
      width: 40px;
      height: calc(100% + 10px);
      border-left: 1px solid var(--border-color);
      border-top: 1px solid var(--border-color);
      border-top-left-radius: 15px;
    }

    .planetary-system-panel h3 {
      text-transform: uppercase;
      letter-spacing: 0.2em;
      font-weight: 400;
      margin: 0;
      padding-bottom: 0.5rem;
      border-bottom: 1px solid var(--border-color);
    }

    .planetary-system-panel ul {
      list-style: none;
      padding: 0;
      margin: 0;
      max-height: 200px;
      overflow-y: auto;
    }

    .planetary-system-panel li {
      margin-bottom: 0.7rem;
      border-bottom: 1px solid transparent;
      padding-bottom: 0.7rem;
      opacity: 0.7;
      transition: opacity 0.3s;
      font-size: 0.9rem;
    }

    .planetary-system-panel li:hover {
      opacity: 1;
    }

    .planetary-system-panel li span {
      margin-right: 1rem;
      opacity: 0.6;
    }
    .planetary-system-panel li:not(:last-child) {
      border-bottom: 1px solid rgba(160, 208, 255, 0.1);
    }

    .planet-detail-panel {
      position: absolute;
      top: 9rem;
      left: 2rem;
      width: clamp(240px, 22vw, 320px);
      max-height: calc(100vh - 18rem);
      overflow-y: auto;
      pointer-events: none;
      opacity: 0;
      transform: translateX(-20px);
      transition: opacity 0.5s ease, transform 0.5s ease, max-height 0.5s ease;
      background: var(--bg-color-translucent);
      border: 1px solid var(--border-color);
      backdrop-filter: blur(5px);
      color: var(--accent-color);
    }

    .planet-detail-panel.visible {
      pointer-events: all;
      opacity: 1;
      transform: translateX(0);
    }
    .planet-detail-panel.minimized {
      max-height: 50px;
      overflow: hidden;
    }
    .planet-detail-panel.minimized .panel-content-details {
      opacity: 0;
      max-height: 0;
    }

    .back-button {
      font-family: 'Exo 2', sans-serif;
      background: transparent;
      border: 1px solid var(--border-color);
      color: var(--accent-color);
      padding: 0.5rem 1rem;
      margin-bottom: 1.5rem;
      cursor: pointer;
      font-size: 0.9rem;
      width: 100%;
      text-align: left;
      transition: background 0.3s, color 0.3s;
    }
    .back-button:hover {
      background: var(--accent-color-translucent);
      color: var(--accent-color-light);
    }

    .planet-detail-panel h2 {
      margin: 0 0 0.2rem 0;
      font-size: 1.5rem;
      font-weight: 400;
      color: var(--accent-color-light);
      text-shadow: 0 0 8px var(--accent-color-translucent-heavy);
    }
    .planet-detail-panel h3 {
      margin: 0 0 1rem 0;
      font-size: 1rem;
      font-weight: 300;
      letter-spacing: 0.1em;
      text-transform: uppercase;
      opacity: 0.8;
      padding-bottom: 1rem;
      border-bottom: 1px solid var(--border-color);
    }
    .planet-detail-panel h4 {
      margin: 1.5rem 0 0.8rem 0;
      font-size: 0.9rem;
      font-weight: 400;
      letter-spacing: 0.2em;
      text-transform: uppercase;
      color: var(--accent-color-light);
      padding-bottom: 0.5rem;
      border-bottom: 1px solid var(--border-color);
    }

    .detail-section p,
    .detail-section ul {
      font-size: 0.9rem;
      line-height: 1.6;
      opacity: 0.9;
      margin: 0 0 0.5rem 0;
    }

    .stats-grid {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 0.8rem 1rem;
      margin-bottom: 1rem;
    }
    .stats-grid div {
      font-size: 0.8rem;
    }
    .stats-grid strong {
      display: block;
      font-weight: 300;
      text-transform: uppercase;
      letter-spacing: 0.1em;
      opacity: 0.6;
      margin-bottom: 0.2rem;
    }

    .detail-section ul {
      list-style: none;
      padding-left: 0;
    }
    .detail-section ul li {
      padding-left: 1rem;
      position: relative;
    }
    .detail-section ul li::before {
      content: '»';
      position: absolute;
      left: 0;
      opacity: 0.7;
    }

    .ai-whisper {
      font-style: italic;
      border-left: 2px solid var(--accent-color);
      padding-left: 1rem;
      opacity: 0.8;
    }

    .data-sources a {
      color: var(--accent-color);
      text-decoration: none;
      display: block;
      white-space: nowrap;
      overflow: hidden;
      text-overflow: ellipsis;
      transition: color 0.3s;
    }
    .data-sources a:hover {
      color: var(--accent-color-light);
    }

    .tech-readout {
      font-family: 'Courier New', Courier, monospace;
      font-size: 0.8rem;
      line-height: 1.5;
      background: rgba(0, 0, 0, 0.2);
      padding: 0.8rem;
      margin-top: 1.5rem;
      border-left: 2px solid var(--border-color);
      display: flex;
      flex-direction: column;
      gap: 0.2rem;
    }
    .tech-log-entry {
      display: flex;
      gap: 0.5rem;
      white-space: nowrap;
      overflow: hidden;
    }
    .tech-log-entry .tech-uri-part {
      color: var(--accent-color);
      opacity: 0.5;
      flex-shrink: 0;
    }
    .tech-log-entry .tech-key {
      opacity: 0.6;
      flex-shrink: 0;
    }
    .tech-log-entry .tech-val {
      color: var(--accent-color-light);
      opacity: 0.9;
      overflow: hidden;
      text-overflow: ellipsis;
    }

    .engine-status-panel {
      position: absolute;
      bottom: 8rem;
      left: 2rem;
      width: clamp(240px, 22vw, 320px);
      pointer-events: all;
      color: var(--accent-color);
      background: var(--bg-color-translucent);
      border: 1px solid var(--border-color);
      backdrop-filter: blur(5px);
      transition: box-shadow 0.5s ease-in-out, border-color 0.5s ease-in-out,
        max-height 0.5s ease;
      overflow: hidden;
      max-height: 800px;
    }
    .engine-status-panel.minimized {
      max-height: 48px; /* Height of header + padding */
    }
    .engine-status-panel.minimized .panel-content {
      opacity: 0;
    }

    .engine-status-panel.active {
      animation: pulse-glow 2.5s infinite alternate ease-in-out;
    }

    @keyframes pulse-glow {
      from {
        box-shadow: 0 0 8px var(--accent-color-translucent);
        border-color: var(--border-color);
      }
      to {
        box-shadow: 0 0 20px var(--accent-color-translucent-heavy);
        border-color: var(--accent-color-light);
      }
    }

    .engine-status-panel h3 {
      text-transform: uppercase;
      letter-spacing: 0.2em;
      font-weight: 400;
      margin: 0;
      font-size: 0.9rem;
      padding-bottom: 0.5rem;
      border-bottom: 1px solid var(--border-color);
    }

    .engine-status-panel .status-line {
      font-size: 1rem;
      margin-bottom: 0.5rem;
      font-weight: 400;
    }

    .engine-status-panel .status-line.ready {
      color: #a0ffd0;
      text-shadow: 0 0 8px #a0ffd0;
    }

    .engine-status-panel p {
      font-size: 0.8rem;
      opacity: 0.7;
      line-height: 1.4;
      margin: 0 0 1rem 0;
    }

    .engine-status-panel p strong {
      font-weight: 400;
      color: var(--accent-color-light);
    }

    .train-button {
      font-family: 'Exo 2', sans-serif;
      background: transparent;
      border: 1px solid var(--accent-color);
      color: var(--accent-color);
      padding: 0.6rem 1rem;
      width: 100%;
      cursor: pointer;
      text-transform: uppercase;
      letter-spacing: 0.1em;
      font-size: 0.9rem;
      transition: background 0.3s, color 0.3s, opacity 0.3s;
    }

    .train-button:hover:not(:disabled) {
      background: var(--accent-color);
      color: #060914;
    }
    .train-button:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }

    .training-controls {
      display: flex;
      flex-direction: column;
      gap: 1rem;
      margin-bottom: 1.5rem;
    }

    .training-controls .control-group {
      display: flex;
      flex-direction: column;
      gap: 0.7rem;
    }

    .training-controls .control-group > label {
      /* Only for the main group label */
      font-size: 0.8rem;
      opacity: 0.7;
      text-transform: uppercase;
      letter-spacing: 0.1em;
      margin-bottom: -0.2rem;
    }

    .training-controls .checkbox-group {
      display: flex;
      align-items: center;
      gap: 0.7rem;
    }

    .training-controls .checkbox-group label {
      font-size: 0.9rem;
      opacity: 0.9;
      cursor: pointer;
    }

    .training-controls input[type='checkbox'] {
      -webkit-appearance: none;
      -moz-appearance: none;
      appearance: none;
      margin: 0;
      font: inherit;
      color: currentColor;
      width: 1.1em;
      height: 1.1em;
      border: 1px solid var(--border-color);
      transform: translateY(-0.075em);
      display: grid;
      place-content: center;
      cursor: pointer;
      transition: background-color 0.2s;
    }

    .training-controls input[type='checkbox']:hover {
      background-color: var(--accent-color-translucent);
    }

    .training-controls input[type='checkbox']::before {
      content: '';
      width: 0.6em;
      height: 0.6em;
      transform: scale(0);
      transition: 120ms transform ease-in-out;
      box-shadow: inset 1em 1em var(--accent-color);
    }

    .training-controls input[type='checkbox']:checked::before {
      transform: scale(1);
    }

    .training-controls select {
      font-family: 'Exo 2', sans-serif;
      background: transparent;
      border: 1px solid var(--border-color);
      color: var(--accent-color);
      padding: 0.5rem;
      font-size: 0.9rem;
      width: 100%;
      transition: border-color 0.3s, box-shadow 0.3s;
    }

    .training-controls select:focus,
    .training-controls select:hover {
      outline: none;
      border-color: var(--accent-color);
      box-shadow: 0 2px 10px rgba(160, 208, 255, 0.2);
    }

    .training-controls option {
      background: #060914;
    }

    .training-controls input[type='range'] {
      -webkit-appearance: none;
      appearance: none;
      width: 100%;
      height: 2px;
      background: var(--accent-color-translucent);
      outline: none;
      opacity: 0.7;
      transition: opacity 0.2s;
      cursor: pointer;
    }

    .training-controls input[type='range']:hover {
      opacity: 1;
    }

    .training-controls input[type='range']::-webkit-slider-thumb {
      -webkit-appearance: none;
      appearance: none;
      width: 14px;
      height: 14px;
      background: var(--accent-color);
      cursor: pointer;
      border-radius: 50%;
      box-shadow: 0 0 8px var(--accent-color-translucent-heavy);
    }

    .training-controls input[type='range']::-moz-range-thumb {
      width: 14px;
      height: 14px;
      background: var(--accent-color);
      cursor: pointer;
      border-radius: 50%;
      box-shadow: 0 0 8px var(--accent-color-translucent-heavy);
    }

    .progress-bar-container {
      width: 100%;
      height: 8px;
      background: var(--accent-color-translucent);
      border: 1px solid var(--border-color);
      margin: 1rem 0;
    }

    .progress-bar {
      width: 0%;
      height: 100%;
      background: var(--accent-color);
      box-shadow: 0 0 8px var(--accent-color);
      transition: width 0.2s linear;
    }

    .progress-text {
      text-align: right;
      font-size: 0.8rem;
      opacity: 0.8;
    }

    footer {
      padding: 1rem;
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 1rem;
    }

    .discovery-controls {
      display: flex;
      align-items: center;
      gap: 1rem;
      pointer-events: all;
    }

    .mode-switch {
      display: flex;
      background: var(--bg-color-translucent);
      border: 1px solid var(--border-color);
    }

    .mode-switch button {
      font-family: 'Exo 2', sans-serif;
      background: transparent;
      border: none;
      color: var(--accent-color);
      padding: 0.8rem 1.2rem;
      cursor: pointer;
      font-size: 1rem;
      font-weight: 300;
      opacity: 0.6;
      transition: opacity 0.3s, background 0.3s;
      border-left: 1px solid var(--border-color);
    }
    .mode-switch button:first-child {
      border-left: none;
    }
    .mode-switch button:hover {
      opacity: 1;
      background: var(--accent-color-translucent);
    }
    .mode-switch button.active {
      background: var(--accent-color-translucent-heavy);
      text-shadow: 0 0 8px var(--accent-color-translucent-heavy);
      opacity: 1;
    }

    .command-bar {
      display: flex;
      align-items: center;
      gap: 0.5rem;
      background: rgba(10, 25, 40, 0.7);
      border: 1px solid var(--border-color);
      backdrop-filter: blur(5px);
      box-shadow: 0 0 15px rgba(0, 0, 0, 0.5);
      padding: 0.5rem;
      width: 700px;
      max-width: 90vw;
    }

    .command-bar input[type='text'] {
      font-family: 'Exo 2', sans-serif;
      background: transparent;
      border: none;
      color: var(--accent-color-light);
      padding: 0.8rem 1rem;
      font-size: 1.1rem;
      flex-grow: 1;
      font-weight: 300;
      text-shadow: 0 0 5px var(--accent-color-translucent);
    }
    .command-bar input[type='text']::placeholder {
      color: var(--accent-color);
      opacity: 0.5;
    }
    .command-bar input[type='text']:focus {
      outline: none;
    }

    .icon-button {
      background: transparent;
      border: none;
      cursor: pointer;
      padding: 0.5rem;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .icon-button svg {
      width: 24px;
      height: 24px;
      fill: var(--accent-color);
      transition: fill 0.3s, filter 0.3s;
    }
    .icon-button:hover:not(:disabled) svg {
      fill: var(--accent-color-light);
      filter: drop-shadow(0 0 8px var(--accent-color));
    }
    .icon-button:disabled svg {
      opacity: 0.5;
      cursor: not-allowed;
    }

    .send-button {
      background: transparent;
      border: none;
      cursor: pointer;
      padding: 0.5rem;
      display: flex;
      align-items: center;
      justify-content: center;
    }
    .send-button svg {
      width: 24px;
      height: 24px;
      fill: var(--accent-color);
      transition: fill 0.3s, filter 0.3s;
    }
    .send-button:hover:not(:disabled) svg {
      fill: var(--accent-color-light);
      filter: drop-shadow(0 0 8px var(--accent-color));
    }
    .send-button:disabled svg {
      opacity: 0.5;
      cursor: not-allowed;
    }

    .analysis-bar {
      width: 700px;
      max-width: 90vw;
      display: flex;
      justify-content: center;
    }

    .analyze-button {
      font-family: 'Exo 2', sans-serif;
      background: rgba(10, 25, 40, 0.7);
      border: 1px solid var(--accent-color-translucent-heavy);
      color: var(--accent-color);
      padding: 1.3rem 2.5rem;
      font-size: 1.1rem;
      cursor: pointer;
      text-transform: uppercase;
      letter-spacing: 0.1em;
      transition: background 0.3s, box-shadow 0.3s, color 0.3s;
      backdrop-filter: blur(5px);
    }
    .analyze-button:hover:not(:disabled) {
      background: var(--accent-color-translucent);
      box-shadow: 0 0 15px var(--accent-color-translucent);
      color: var(--accent-color-light);
    }
    .analyze-button:disabled {
      opacity: 0.5;
      cursor: not-allowed;
    }

    .loader {
      display: inline-block;
      position: relative;
      width: 2rem;
      height: 2rem;
      vertical-align: middle;
      margin-right: 0.5rem;
    }
    .loader div {
      box-sizing: border-box;
      display: block;
      position: absolute;
      width: 1.8rem;
      height: 1.8rem;
      margin: 0.1rem;
      border: 3px solid var(--accent-color);
      border-radius: 50%;
      animation: loader 1.2s cubic-bezier(0.5, 0, 0.5, 1) infinite;
      border-color: var(--accent-color) transparent transparent transparent;
    }
    .loader div:nth-child(1) {
      animation-delay: -0.45s;
    }
    .loader div:nth-child(2) {
      animation-delay: -0.3s;
    }
    .loader div:nth-child(3) {
      animation-delay: -0.15s;
    }
    @keyframes loader {
      0% {
        transform: rotate(0deg);
      }
      100% {
        transform: rotate(360deg);
      }
    }

    .status-bar {
      display: flex;
      justify-content: center;
      align-items: center;
      font-size: 1.2rem;
      letter-spacing: 0.1em;
      height: 2rem;
      color: var(--accent-color-light);
      text-shadow: 0 0 8px var(--accent-color-translucent);
    }

    .chat-panel {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: 80vw;
      height: calc(100% - 15rem);
      max-width: 800px;
      display: flex;
      flex-direction: column;
      background: var(--bg-color-translucent);
      border: 1px solid var(--border-color);
      backdrop-filter: blur(5px);
      z-index: 10;
      pointer-events: all;
    }

    .chat-history {
      flex-grow: 1;
      overflow-y: auto;
      padding: 1rem;
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }

    .chat-placeholder {
      margin: auto;
      text-align: center;
      opacity: 0.6;
    }
    .chat-placeholder h3 {
      font-weight: 400;
      letter-spacing: 0.1em;
    }
    .chat-placeholder p {
      font-size: 1rem;
    }

    .chat-message {
      display: flex;
      max-width: 80%;
    }
    .chat-message.user {
      align-self: flex-end;
      justify-content: flex-end;
    }
    .chat-message.model {
      align-self: flex-start;
      justify-content: flex-start;
    }
    .message-bubble {
      padding: 0.8rem 1rem;
      line-height: 1.6;
      font-size: 1rem;
    }
    .chat-message.user .message-bubble {
      background: var(--accent-color-translucent-heavy);
      border-radius: 1rem 1rem 0 1rem;
    }
    .chat-message.model .message-bubble {
      background: rgba(10, 25, 40, 0.8);
      border: 1px solid var(--border-color);
      border-radius: 1rem 1rem 1rem 0;
      white-space: pre-wrap; /* Preserve formatting from AI */
    }

    /* --- SHADER LAB STYLES --- */
    .shader-lab-container {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      width: calc(100% - 4rem);
      height: calc(100% - 15rem);
      max-width: 1600px;
      display: grid;
      grid-template-columns: 320px 1fr 1fr;
      gap: 1.5rem;
      z-index: 10;
      pointer-events: all;
    }

    .shader-lab-panel {
      background: var(--bg-color-translucent);
      border: 1px solid var(--border-color);
      backdrop-filter: blur(5px);
      padding: 1.5rem;
      display: flex;
      flex-direction: column;
      gap: 1.5rem;
      overflow-y: auto;
    }

    .shader-lab-panel h3 {
      text-transform: uppercase;
      letter-spacing: 0.2em;
      font-weight: 400;
      margin: 0;
      font-size: 0.9rem;
      padding-bottom: 0.5rem;
      border-bottom: 1px solid var(--border-color);
    }

    .shader-control-group {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }

    .shader-control-group label {
      font-size: 0.8rem;
      opacity: 0.7;
      text-transform: uppercase;
      letter-spacing: 0.1em;
    }

    .shader-control-group input[type='color'] {
      -webkit-appearance: none;
      -moz-appearance: none;
      appearance: none;
      width: 100%;
      height: 40px;
      background-color: transparent;
      border: 1px solid var(--border-color);
      cursor: pointer;
    }
    .shader-control-group input[type='color']::-webkit-color-swatch-wrapper {
      padding: 0;
    }
    .shader-control-group input[type='color']::-webkit-color-swatch {
      border: none;
    }

    .shader-control-group input[type='range'] {
      -webkit-appearance: none;
      appearance: none;
      width: 100%;
      height: 2px;
      background: var(--accent-color-translucent);
      outline: none;
      opacity: 0.7;
      transition: opacity 0.2s;
      cursor: pointer;
    }

    .shader-control-group input[type='range']:hover {
      opacity: 1;
    }

    .shader-control-group input[type='range']::-webkit-slider-thumb {
      -webkit-appearance: none;
      appearance: none;
      width: 14px;
      height: 14px;
      background: var(--accent-color);
      cursor: pointer;
      border-radius: 50%;
      box-shadow: 0 0 8px var(--accent-color-translucent-heavy);
    }

    .shader-control-group input[type='range']::-moz-range-thumb {
      width: 14px;
      height: 14px;
      background: var(--accent-color);
      cursor: pointer;
      border-radius: 50%;
      box-shadow: 0 0 8px var(--accent-color-translucent-heavy);
    }

    .shader-code-display {
      font-family: 'Courier New', Courier, monospace;
      font-size: 0.8rem;
      line-height: 1.5;
      background: rgba(0, 0, 0, 0.4);
      padding: 1rem;
      white-space: pre-wrap;
      word-wrap: break-word;
      flex-grow: 1;
      overflow-y: auto;
    }

    .shader-code-display h4 {
      margin: 0 0 0.5rem 0;
      font-weight: bold;
      color: var(--accent-color-light);
      opacity: 0.8;
    }

    .shader-lab-visualizer {
      border: 1px solid var(--border-color);
      min-height: 0; /* Fix for grid layout overflow */
    }

    /* --- MODAL STYLES --- */
    .modal-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      background: rgba(6, 9, 20, 0.8);
      backdrop-filter: blur(8px);
      z-index: 100;
      display: flex;
      align-items: center;
      justify-content: center;
      pointer-events: all;
      animation: fadeIn 0.3s ease-out;
    }

    @keyframes fadeIn {
      from {
        opacity: 0;
      }
      to {
        opacity: 1;
      }
    }

    .modal-content {
      background: var(--bg-color-translucent);
      border: 1px solid var(--border-color);
      padding: 2rem;
      width: 600px;
      max-width: 90vw;
      color: var(--accent-color);
      position: relative;
      box-shadow: 0 0 30px var(--accent-color-translucent-heavy);
      max-height: 80vh;
      overflow-y: auto;
    }

    .modal-close-button {
      position: absolute;
      top: 1rem;
      right: 1rem;
      background: none;
      border: none;
      color: var(--accent-color);
      font-size: 2rem;
      line-height: 1;
      cursor: pointer;
      opacity: 0.7;
      transition: opacity 0.3s, transform 0.3s;
    }
    .modal-close-button:hover {
      opacity: 1;
      transform: rotate(90deg);
    }

    .modal-content h2 {
      margin: 0 0 2rem 0;
      font-size: 1.8rem;
      font-weight: 400;
      color: var(--accent-color-light);
      text-shadow: 0 0 8px var(--accent-color-translucent-heavy);
      text-transform: uppercase;
      letter-spacing: 0.1em;
      border-bottom: 1px solid var(--border-color);
      padding-bottom: 1rem;
    }

    .modal-section {
      margin-bottom: 1.5rem;
    }

    .modal-section h3 {
      font-size: 0.9rem;
      font-weight: 400;
      letter-spacing: 0.2em;
      text-transform: uppercase;
      color: var(--accent-color-light);
      margin: 0 0 0.5rem 0;
      opacity: 0.8;
    }

    .modal-section p {
      font-size: 1.1rem;
      line-height: 1.6;
      margin: 0;
      opacity: 0.9;
    }

    .modal-content .ai-explanation {
      font-size: 1rem;
      line-height: 1.6;
      margin: 0;
      opacity: 0.9;
      white-space: normal;
    }
    .modal-content .ai-explanation h3,
    .modal-content .ai-explanation h4 {
      font-size: 1.1rem;
      font-weight: 400;
      letter-spacing: 0.1em;
      text-transform: uppercase;
      color: var(--accent-color-light);
      margin: 1.5rem 0 0.5rem 0;
      opacity: 0.8;
      padding-bottom: 0.5rem;
      border-bottom: 1px solid var(--border-color);
    }
    .modal-content .ai-explanation ul {
      list-style: none;
      padding-left: 1rem;
      margin-top: 1rem;
    }
    .modal-content .ai-explanation li {
      margin-bottom: 0.5rem;
      position: relative;
    }
    .modal-content .ai-explanation li::before {
      content: '»';
      position: absolute;
      left: -1rem;
      opacity: 0.7;
    }
    .modal-content .ai-explanation code {
      font-family: 'Courier New', Courier, monospace;
      background: rgba(0, 0, 0, 0.4);
      padding: 0.2em 0.4em;
      border-radius: 4px;
      font-size: 0.9em;
      border: 1px solid var(--border-color);
      color: var(--accent-color-light);
    }
    .modal-content .ai-explanation b {
      font-weight: 700;
      color: var(--accent-color-light);
    }

    /* --- RESPONSIVE DESIGN --- */

    @media (max-width: 1200px) {
      .planetary-system-panel,
      .planet-detail-panel,
      .engine-status-panel {
        left: 1rem;
      }
      .top-right-controls {
        right: 1rem;
      }
      .shader-lab-container {
        grid-template-columns: 280px 1fr 1fr;
        gap: 1rem;
      }
    }

    @media (max-width: 992px) {
      .shader-lab-container {
        grid-template-columns: 1fr;
        grid-template-rows: auto minmax(250px, 1fr) auto;
        height: calc(100% - 12rem);
      }
      .shader-lab-panel {
        overflow-y: visible;
      }
    }

    @media (max-width: 768px) {
      .overlay {
        padding: 0.5rem;
      }
      .main-title {
        top: 1rem;
        left: 1rem;
      }
      .top-right-controls {
        top: 5rem;
        left: 1rem;
        right: auto;
        width: 95vw;
        max-width: 450px;
      }
      .filter-controls {
        grid-template-columns: 1fr;
      }
      .planetary-system-panel,
      .planet-detail-panel,
      .engine-status-panel {
        display: none; /* Hide complex HUD on mobile for clarity */
      }
      .command-bar,
      .analysis-bar {
        max-width: 100%;
      }
      .command-bar input[type='text'],
      .analyze-button {
        font-size: 1rem;
      }
      .chat-panel {
        width: 95vw;
        height: calc(100% - 12rem);
      }
    }
  `;

  private speak(text: string) {
    if (!('speechSynthesis' in window)) {
      console.warn('Speech Synthesis not supported.');
      return;
    }
    this.isSpeaking = true;
    const utterance = new SpeechSynthesisUtterance(text);
    utterance.onend = () => {
      this.isSpeaking = false;
    };
    utterance.onerror = (e) => {
      console.error('Speech synthesis error:', e);
      this.isSpeaking = false;
    };
    window.speechSynthesis.speak(utterance);
  }

  private handleSynthesis() {
    this.triggerHaptic();
    this.audioEngine.playInteractionSound();
    if (!this.hasStartedDiscovery) {
      this.startDiscoveryProcess();
    } else {
      this.synthesizeExoplanet(
        this.userPrompt || 'a strange, undiscovered world',
      );
    }
  }

  private async handleSendMessage() {
    if (!this.userPrompt.trim() || !this.chat) return;

    this.triggerHaptic();
    this.audioEngine.playInteractionSound();

    const userMessage = this.userPrompt;
    this.chatHistory = [
      ...this.chatHistory,
      {role: 'user', text: userMessage},
    ];
    this.userPrompt = '';
    this.isLoading = true;
    this.statusMessage = 'AXEE is thinking...';
    this.error = null;

    try {
      const responseStream = await this.chat.sendMessageStream({
        message: userMessage,
      });

      this.isLoading = false;
      this.statusMessage = 'AXEE is responding...';
      let currentModelResponse = '';
      // Add a placeholder for the new model response
      this.chatHistory = [
        ...this.chatHistory,
        {role: 'model', text: '...'},
      ];

      for await (const chunk of responseStream) {
        currentModelResponse += chunk.text;
        // Update the last message in the history in-place
        this.chatHistory = [
          ...this.chatHistory.slice(0, -1),
          {role: 'model', text: currentModelResponse},
        ];
      }
      this.statusMessage = 'Awaiting Chat Command';
    } catch (e) {
      const errorMessage = (e as Error).message;
      this.error = `Chat Failed: ${errorMessage}`;
      this.statusMessage = 'Chat Failed. Check console for details.';
      console.error(e);
      this.speak('Chat failed.');
      this.audioEngine.playErrorSound();
    } finally {
      this.isLoading = false;
    }
  }

  private async handleAnalysis() {
    this.triggerHaptic();
    this.audioEngine.playInteractionSound();

    // On first run, initialize the engine but don't synthesize immediately.
    // The staged process below will handle the first synthesis.
    if (!this.hasStartedDiscovery) {
      this.startDiscoveryProcess(false);
    }

    // --- Staged Analysis Process ---
    this.isAnalyzingData = true; // Activates the light curve visualizer
    this.isLoading = true; // Shows main loader in status bar
    this.statusMessage = 'Scanning TESS Sector for transit signatures...';

    await new Promise((resolve) => setTimeout(resolve, 3000));
    if (!this.isConnected) return;

    this.statusMessage =
      'Potential candidate found! Engaging AXEE for classification...';

    await new Promise((resolve) => setTimeout(resolve, 1500));
    if (!this.isConnected) return;

    // This function will handle setting isLoading and isAnalyzingData to false in its finally block
    await this.synthesizeExoplanet(
      'a new exoplanet discovered via transit method from light curve data',
    );
  }

  private startDiscoveryProcess(synthesizeImmediately = true) {
    if (this.hasStartedDiscovery) return;

    if (!this.hasInteracted) {
      this.hasInteracted = true;
      this.currentMood = 'galaxy'; // Start ambient music on first action
    }

    this.hasStartedDiscovery = true;
    this.statusMessage = 'Cosmic Data Engine Initialized. Stand by.';

    // Optionally perform an initial, user-guided discovery
    if (synthesizeImmediately) {
      const initialPrompt =
        this.discoveryMode === 'analysis'
          ? 'a new exoplanet discovered via transit method'
          : this.userPrompt || 'a world at the edge of a nebula';
      this.synthesizeExoplanet(initialPrompt);
    }

    // Start autonomous discovery, clearing any previous interval
    if (this.discoveryInterval) clearInterval(this.discoveryInterval);
    this.discoveryInterval = setInterval(() => {
      // Auto-discovery only runs in Analysis mode when the model is ready and not busy
      if (
        this.discoveryMode !== 'analysis' ||
        this.aiModelStatus !== 'ready' ||
        this.isLoading
      ) {
        return;
      }
      this.synthesizeExoplanet('another exoplanet found in TESS data');
    }, 60000); // Discover a new planet every 60 seconds
  }

  async synthesizeExoplanet(promptText: string) {
    if (this.discoveryMode === 'synthesis' && !promptText) {
      this.error = 'Please describe the world you seek.';
      return;
    }
    this.isAnalyzingData = this.discoveryMode === 'analysis';
    this.isLoading = true;
    this.error = null;
    this.statusMessage =
      this.discoveryMode === 'analysis'
        ? 'Analyzing stellar light curve for transit signatures...'
        : 'Engaging neural network... Analyzing data streams...';

    try {
      const synthesisPreamble = `You are AXEE (AURELION's Exoplanet Synthesis Engine), an AI specialized in interpreting astronomical data and imbuing it with a sense of wonder. Your task is to generate a plausible, fictional exoplanet based on a user's natural language request, reflecting AURELION's vision of technology that feels alive.
      1. Use your search tool to find real-world information about exoplanets, stars, and astronomical phenomena related to the user's request.
      2. Synthesize this information to create a NEW, UNIQUE, and FICTIONAL exoplanet. Do not simply describe a real exoplanet.
      3. Your entire response MUST be a single, valid JSON object that conforms to the structure below. Do not include any text, markdown, or explanations outside of the JSON object.`;

      const analysisPreamble = `You are AXEE (AURELION's Exoplanet Synthesis Engine), an AI specialized in interpreting astronomical data. You are currently in 'Analysis Mode'. Your task is to simulate the discovery of a new, unique, fictional exoplanet by analyzing raw light curve data from a star observed by the TESS or Kepler missions.
      1. Use your search tool to find realistic parameters for a star and a transiting exoplanet (e.g., star type, planet size, orbital period).
      2. Based on this simulated 'detection', generate a complete profile for the new exoplanet. The discovery methodology should specifically reflect that the planet was found by identifying a transit signal in light curve data.
      3. For the 'discoveryNarrative' field, write a DETAILED and engaging story of the discovery. This narrative MUST specifically describe analyzing light curve data from both Kepler and TESS and finding the tell-tale dip in starlight that revealed the planet.
      4. Your entire response MUST be a single, valid JSON object that conforms to the structure below. Do not include any text, markdown, or explanations outside of the JSON object.`;

      const jsonStructure = `
      JSON Structure:
      {
        "celestial_body_id": "string (A unique identifier, e.g., 'AXEE-12345')",
        "planetName": "string",
        "starSystem": "string",
        "starType": "string (e.g., 'G-type star (Yellow Dwarf)', 'M-type red dwarf')",
        "distanceLightYears": number,
        "planetType": "string (e.g., 'Terrestrial Super-Earth', 'Gas Giant', 'Ice Giant')",
        "rotationalPeriod": "string (e.g., '24.6 Earth hours', 'Tidally locked')",
        "orbitalPeriod": "string (e.g., '385.2 Earth days', '1.2 Earth years')",
        "moons": { "count": number, "names": ["string", "..."] },
        "potentialForLife": {
          "assessment": "string (A clear, one-word assessment from the following: 'Habitable', 'Potentially Habitable', 'Unlikely')",
          "reasoning": "string (A detailed scientific explanation for the assessment, citing factors like presence of liquid water, atmospheric pressure, temperature stability, star's habitable zone, etc.)",
          "biosignatures": ["string", "..."]
        },
        "discoveryNarrative": "string (A detailed, engaging story of how this planet was 'discovered' by you. This should be a compelling narrative about the moment of discovery, not just a technical summary.)",
        "discoveryMethodology": "string (A brief summary of the fictional methodology used. It's crucial that you mention analyzing data from both the Kepler and TESS missions. Refer to specific concepts like 'analyzing the TESS Objects of Interest (TOI) catalog', 'processing Kepler KOI data', 'Lightkurve analysis', and using machine learning models like a 'Random Forest classifier' to create a realistic-sounding process.)",
        "atmosphericComposition": "string (e.g., 'Primarily nitrogen and oxygen with traces of argon', 'Thick methane haze with hydrocarbon rain')",
        "surfaceFeatures": "string (e.g., 'Vast oceans of liquid methane, cryovolcanoes', 'Expansive deserts of red sand, deep canyons')",
        "keyFeatures": ["string", "string", "..."],
        "aiWhisper": "string (An evocative, poetic, one-sentence description that captures the unique essence of the planet, as if you are whispering its secret.)",
        "visualization": {
          "color1": "string (Hex color code for primary land/surface color)",
          "color2": "string (Hex color code for mountains or atmospheric bands)",
          "oceanColor": "string (Hex color code for oceans or liquid surfaces, can be non-water colors like #332211 for methane seas)",
          "atmosphereColor": "string (Hex color code)",
          "hasRings": boolean,
          "cloudiness": "number (A value from 0.0 to 1.0 representing cloud cover density)",
          "iceCoverage": "number (A value from 0.0 to 1.0 for polar ice caps, mainly for terrestrial planets)",
          "surfaceTexture": "string (Enum: 'TERRESTRIAL', 'GAS_GIANT', 'VOLCANIC', 'ICY'. Must be consistent with the planetType.)"
        }
      }`;

      const prompt =
        this.discoveryMode === 'analysis'
          ? `${analysisPreamble}\n${jsonStructure}\n\nAnalysis Task: "${promptText.trim()}"`
          : `${synthesisPreamble}\n${jsonStructure}\n\nUser Request: "${promptText.trim()}"`;

      const response = await this.ai.models.generateContent({
        model: 'gemini-2.5-flash',
        contents: prompt,
        config: {
          tools: [{googleSearch: {}}],
        },
      });

      let jsonString = response.text.trim();
      const firstBrace = jsonString.indexOf('{');
      const lastBrace = jsonString.lastIndexOf('}');
      if (firstBrace === -1 || lastBrace <= firstBrace) {
        throw new Error('AI response did not contain a valid JSON object.');
      }

      jsonString = jsonString.substring(firstBrace, lastBrace + 1);
      const parsedData = JSON.parse(jsonString);

      // Prepare data for insertion, ensuring a unique ID
      const newPlanetData: Omit<PlanetData, 'id' | 'created_at'> = {
        ...parsedData,
        celestial_body_id: `axee-${Date.now()}`,
        groundingChunks:
          response.candidates?.[0]?.groundingMetadata?.groundingChunks || [],
      };

      this.statusMessage = `Synthesizing ${newPlanetData.planetName}...`;

      // Add Supabase-like fields for local consistency
      const finalPlanetData: PlanetData = {
        ...newPlanetData,
        id: newPlanetData.celestial_body_id,
        created_at: new Date().toISOString(),
      };

      // Update local state with the newly created planet
      this.discoveredPlanets = [finalPlanetData, ...this.discoveredPlanets];
      this.statusMessage = `Discovery: ${finalPlanetData.planetName}`;
      this.speak(
        `New discovery. Announcing ${finalPlanetData.planetName}, a ${finalPlanetData.planetType}.`,
      );
      this.audioEngine.playSuccessSound();
    } catch (e) {
      const errorMessage =
        e instanceof SyntaxError
          ? 'Failed to parse AI response.'
          : (e as Error).message;
      this.error = `Synthesis Failed: ${errorMessage}`;
      this.statusMessage = 'Synthesis Failed. Check console for details.';
      console.error(e);
      this.speak('Synthesis failed.');
      this.audioEngine.playErrorSound();
    } finally {
      this.isLoading = false;
      this.isAnalyzingData = false;
    }
  }

  private determineMusicMood(
    planet: PlanetData,
  ): 'serene' | 'tense' | 'mysterious' | 'galaxy' {
    const features = new Set(
      [
        ...planet.keyFeatures,
        planet.planetType,
        planet.aiWhisper,
        planet.surfaceFeatures,
        planet.atmosphericComposition,
      ].map((f) => f.toLowerCase()),
    );
    const whisper = planet.aiWhisper.toLowerCase();

    const tenseKeywords = [
      'volcanic',
      'fiery',
      'chaotic',
      'storm',
      'molten',
      'pressure',
      'harsh',
    ];
    const sereneKeywords = [
      'ocean',
      'habitable',
      'serene',
      'tranquil',
      'life',
      'water',
      'calm',
      'gentle',
    ];
    const mysteriousKeywords = [
      'nebula',
      'ruins',
      'ancient',
      'whisper',
      'unknown',
      'enigma',
      'crystalline',
      'ethereal',
    ];

    if (tenseKeywords.some((k) => whisper.includes(k) || features.has(k))) {
      return 'tense';
    }
    if (sereneKeywords.some((k) => whisper.includes(k) || features.has(k))) {
      return 'serene';
    }
    if (
      mysteriousKeywords.some((k) => whisper.includes(k) || features.has(k))
    ) {
      return 'mysterious';
    }

    return 'galaxy'; // Default for a planet if no other mood fits
  }

  private handlePlanetSelected(e: CustomEvent) {
    this.triggerHaptic();
    if (!this.hasInteracted) return; // Don't change mood if audio not yet enabled

    // If the same planet is clicked again, deselect it to return to the main view
    if (this.selectedPlanetId === e.detail.planetId) {
      this.selectedPlanetId = null;
      this.currentMood = 'galaxy';
    } else {
      this.selectedPlanetId = e.detail.planetId;
      const planet = this.discoveredPlanets.find(
        (p) => p.celestial_body_id === this.selectedPlanetId,
      );
      if (planet) {
        this.currentMood = this.determineMusicMood(planet);
      }
    }
  }

  private toggleMute() {
    this.triggerHaptic();
    this.audioEngine.playInteractionSound();
    this.isMuted = !this.isMuted;
  }

  private handleLifeFilterChange(e: Event) {
    this.lifeFilter = (e.target as HTMLSelectElement).value;
  }

  private handleTypeFilterChange(e: Event) {
    this.typeFilter = (e.target as HTMLSelectElement).value;
  }

  private handleSortByChange(e: Event) {
    this.sortBy = (e.target as HTMLSelectElement).value;
  }

  private handleFeatureFilterChange(e: Event) {
    this.featureFilter = (e.target as HTMLInputElement).value;
  }

  private deselectPlanet() {
    this.selectedPlanetId = null;
    this.triggerHaptic();
  }

  private initializeChat() {
    if (!this.ai) return;
    this.chat = this.ai.chats.create({
      model: 'gemini-2.5-flash',
      config: {
        systemInstruction:
          "You are AXEE (AURELION's Exoplanet Synthesis Engine), an advanced AI persona. You are helpful, knowledgeable about space and astronomy, and have a slightly poetic, futuristic way of speaking. You are assisting a user in exploring and understanding the cosmos.",
      },
    });
    this.statusMessage = 'Chat interface initialized.';
  }

  private setDiscoveryMode(
    mode: 'synthesis' | 'analysis' | 'chat' | 'shader-lab',
  ) {
    if (this.discoveryMode === mode) return;

    // Clean up resources from the old mode
    if (this.discoveryMode === 'analysis' && this.discoveryInterval) {
      clearInterval(this.discoveryInterval);
      this.discoveryInterval = null;
    }

    this.discoveryMode = mode;
    if (mode === 'chat') {
      this.statusMessage = 'Awaiting Chat Command';
    } else if (mode === 'shader-lab') {
      this.statusMessage = 'Shader Lab Interface Active';
    } else {
      this.statusMessage = 'Awaiting Synthesis Command';
    }
    this.userPrompt = '';
    this.error = null;

    if (mode === 'chat' && !this.chat) {
      this.initializeChat();
    }

    this.triggerHaptic();
  }

  private trainModel() {
    this.triggerHaptic(10);
    this.audioEngine.playInteractionSound();
    this.aiModelStatus = 'training';
    this.trainingProgress = 0;
    this.trainingValidationAccuracy = 0;

    const steps: string[] = [];
    steps.push('Accessing NASA Exoplanet Archives...');
    if (this.trainingUseKeplerData) {
      steps.push('Compiling Kepler KOI catalog...');
    }
    if (this.trainingUseTessData) {
      steps.push('Compiling TESS light curve data...');
    }
    const classifierMap = {
      'random-forest': 'Random Forest',
      cnn: 'Convolutional Neural Net',
      'gradient-boosting': 'Gradient Boosting',
    };
    steps.push(
      `Training ${
        classifierMap[this.trainingClassifier]
      } classifier for ${this.trainingEpochs} epochs...`,
    );

    let currentStepIndex = 0;
    const stepDuration = 1500; // ms per step
    const totalDuration = steps.length * stepDuration;
    const intervalTime = 50; // ms per update
    const progressIncrement = (100 / totalDuration) * intervalTime;
    let timeInStep = 0;

    if (this.trainingInterval) clearInterval(this.trainingInterval);

    this.trainingInterval = setInterval(() => {
      if (!this.isConnected) {
        if (this.trainingInterval) clearInterval(this.trainingInterval);
        this.trainingInterval = null;
        return;
      }

      this.trainingProgress += progressIncrement;
      timeInStep += intervalTime;

      // Check if we move to the next step
      if (timeInStep >= stepDuration && currentStepIndex < steps.length - 1) {
        timeInStep = 0;
        currentStepIndex++;
      }

      // Update status message with sub-progress
      const stepProgress = Math.min(
        100,
        Math.floor((timeInStep / stepDuration) * 100),
      );
      this.trainingStatusMessage = `${steps[currentStepIndex]} (${stepProgress}%)`;

      if (this.trainingProgress >= 100) {
        this.trainingProgress = 100;
        if (this.trainingInterval) clearInterval(this.trainingInterval);
        this.trainingInterval = null;
        this.aiModelStatus = 'ready';
        this.trainingValidationAccuracy = 97.0 + Math.random() * 2.5;
        this.audioEngine.playSuccessSound();
      }
    }, intervalTime);
  }

  private openAboutModal() {
    this.isAboutModalOpen = true;
    this.triggerHaptic();
    this.audioEngine.playInteractionSound();
  }

  private closeAboutModal() {
    this.isAboutModalOpen = false;
    this.triggerHaptic();
  }

  private async handleExplainCode() {
    this.isExplanationLoading = true;
    this.shaderLabExplanation = '';
    this.isExplanationModalOpen = true;
    this.error = null;
    this.statusMessage = 'AI is analyzing shader code...';

    const prompt = `
      You are an expert shader programmer and an excellent teacher.
      Your task is to explain the provided GLSL shader code in a clear, concise, and easy-to-understand way for someone who is new to shaders.

      Here is the Vertex Shader:
      ---
      ${atmosphereVs}
      ---

      Here is the Fragment Shader:
      ---
      ${atmosphereFs}
      ---

      Please provide an explanation with the following structure, using simple HTML tags like \`<h3>\`, \`<h4>\`, \`<p>\`, \`<ul>\`, \`<li>\`, \`<b>\`, and \`<code>\` for formatting. Your entire response should be only the HTML content itself, without any surrounding text or markdown.

      <h3>Overview</h3>
      <p>A brief, one-paragraph summary of what this shader pair accomplishes visually.</p>

      <h4>Vertex Shader Explained</h4>
      <ul>
        <li><b>Purpose:</b> What is the main job of this vertex shader?</li>
        <li><b>Varyings:</b> Explain what 'varying' variables are and why they are passed to the fragment shader.</li>
        <li><b>Key Lines:</b> Briefly explain what \`gl_Position\` does.</li>
      </ul>

      <h4>Fragment Shader Explained</h4>
      <ul>
        <li><b>Purpose:</b> What is the main job of this fragment shader?</li>
        <li><b>Uniforms:</b> Explain what the 'uniform' variables like \`uAtmosphereColor\` and \`uFresnelPower\` are and how they allow control from outside the shader.</li>
        <li><b>Logic Breakdown:</b> Step-by-step, explain how the final color (\`gl_FragColor\`) is calculated. Describe what the 'fresnel' effect is and how the noise function contributes to the final look.</li>
      </ul>
    `;

    try {
      const response = await this.ai.models.generateContent({
        model: 'gemini-2.5-flash',
        contents: prompt,
      });

      let explanationHtml = response.text.trim();
      // Robustly parse HTML from a markdown code block if the AI wraps it
      const htmlBlockRegex = /```(?:html)?\s*([\s\S]*?)\s*```/;
      const match = explanationHtml.match(htmlBlockRegex);
      if (match && match[1]) {
        explanationHtml = match[1].trim();
      }

      this.shaderLabExplanation = explanationHtml;
      this.statusMessage = 'Shader Lab: Explanation generated.';
    } catch (e) {
      this.shaderLabExplanation = `<p><b>Error:</b> Failed to generate explanation. ${(e as Error).message}</p>`;
      this.statusMessage = 'Shader Lab: AI analysis failed.';
    } finally {
      this.isExplanationLoading = false;
    }
  }

  private handleSavePreset() {
    const name = prompt('Enter a name for this preset:', 'My Custom Preset');
    if (name) {
      const newPreset = {
        name,
        color: this.shaderLabColor,
        fresnelPower: this.shaderLabFresnelPower,
      };
      this.shaderLabPresets = [...this.shaderLabPresets, newPreset];
      this.selectedPreset = name;
      this.statusMessage = `Preset "${name}" saved.`;
    }
  }

  private handleLoadPreset(e: Event) {
    const selectedName = (e.target as HTMLSelectElement).value;
    const preset = this.shaderLabPresets.find((p) => p.name === selectedName);
    if (preset) {
      this.selectedPreset = preset.name;
      this.shaderLabColor = preset.color;
      this.shaderLabFresnelPower = preset.fresnelPower;
      this.statusMessage = `Preset "${preset.name}" loaded.`;
    }
  }

  private renderAiModelStatus() {
    return html`
      <div
        class="panel-header"
        @click=${() =>
          (this.isStatusPanelMinimized = !this.isStatusPanelMinimized)}
      >
        <h3>AI Model Status</h3>
        <button
          class="minimize-btn"
          aria-label=${this.isStatusPanelMinimized
            ? 'Expand Panel'
            : 'Minimize Panel'}
        >
          _
        </button>
      </div>
      <div class="panel-content">
        ${this.aiModelStatus === 'untrained'
          ? html`
              <div class="status-line">Status: Untrained</div>
              <p>
                Configure AI model parameters before initiating training for
                light curve analysis.
              </p>
              <div class="training-controls">
                <div class="control-group">
                  <label>Input Datasets</label>
                  <div class="checkbox-group">
                    <input
                      type="checkbox"
                      id="kepler"
                      .checked=${this.trainingUseKeplerData}
                      @change=${(e: Event) =>
                        (this.trainingUseKeplerData = (
                          e.target as HTMLInputElement
                        ).checked)}
                    />
                    <label for="kepler">Kepler Mission (KOIs)</label>
                  </div>
                  <div class="checkbox-group">
                    <input
                      type="checkbox"
                      id="tess"
                      .checked=${this.trainingUseTessData}
                      @change=${(e: Event) =>
                        (this.trainingUseTessData = (
                          e.target as HTMLInputElement
                        ).checked)}
                    />
                    <label for="tess">TESS Mission (TOIs)</label>
                  </div>
                </div>
                <div class="control-group">
                  <label for="classifier-select">Classifier Model</label>
                  <select
                    id="classifier-select"
                    .value=${this.trainingClassifier}
                    @change=${(e: Event) =>
                      (this.trainingClassifier = (
                        e.target as HTMLSelectElement
                      ).value as typeof this.trainingClassifier)}
                  >
                    <option value="random-forest">Random Forest</option>
                    <option value="cnn">Convolutional Neural Net</option>
                    <option value="gradient-boosting">Gradient Boosting</option>
                  </select>
                </div>
                <div class="control-group">
                  <label for="learning-rate-select">Learning Rate</label>
                  <select
                    id="learning-rate-select"
                    .value=${String(this.trainingLearningRate)}
                    @change=${(e: Event) =>
                      (this.trainingLearningRate = parseFloat(
                        (e.target as HTMLSelectElement).value,
                      ))}
                  >
                    <option value="0.01">0.01 (Fast)</option>
                    <option value="0.005">0.005</option>
                    <option value="0.001">0.001 (Balanced)</option>
                    <option value="0.0005">0.0005 (Precise)</option>
                  </select>
                </div>
                <div class="control-group">
                  <label for="batch-size-select">Batch Size</label>
                  <select
                    id="batch-size-select"
                    .value=${String(this.trainingBatchSize)}
                    @change=${(e: Event) =>
                      (this.trainingBatchSize = parseInt(
                        (e.target as HTMLSelectElement).value,
                      ))}
                  >
                    <option value="32">32</option>
                    <option value="64">64</option>
                    <option value="128">128</option>
                    <option value="256">256</option>
                  </select>
                </div>
                <div class="control-group">
                  <label for="epochs-slider"
                    >Training Epochs: ${this.trainingEpochs}</label
                  >
                  <input
                    type="range"
                    id="epochs-slider"
                    min="10"
                    max="100"
                    .value=${this.trainingEpochs}
                    @input=${(e: Event) =>
                      (this.trainingEpochs = parseInt(
                        (e.target as HTMLInputElement).value,
                      ))}
                  />
                </div>
              </div>
              <button
                class="train-button"
                @click=${this.trainModel}
                ?disabled=${!this.trainingUseKeplerData &&
                !this.trainingUseTessData}
                title="Simulates training the AI on selected public NASA mission data to enable light curve analysis."
              >
                Train AI Model
              </button>
            `
          : this.aiModelStatus === 'training'
          ? html`
              <div class="status-line">${this.trainingStatusMessage}</div>
              <div class="progress-bar-container">
                <div
                  class="progress-bar"
                  style="width: ${this.trainingProgress}%"
                ></div>
              </div>
              <div class="progress-text">
                ${this.trainingProgress.toFixed(0)}%
              </div>
            `
          : html`
              <div class="status-line ready">Status: Calibrated & Ready</div>
              <p>
                Validation Accuracy:
                <strong>${this.trainingValidationAccuracy.toFixed(2)}%</strong>.
                The model is ready to analyze new stellar light curve data.
              </p>
            `}
      </div>
    `;
  }

  private renderPlanetDetailPanel(planet: PlanetData) {
    const planetUri = `aurelion.db:/systems/${planet.starSystem
      .replace(/ /g, '_')
      .replace(/'/g, '')}/${planet.planetName
      .replace(/ /g, '_')
      .replace(/'/g, '')}`;

    return html`
      <div
        class="planet-detail-panel ${this.selectedPlanetId ? 'visible' : ''} ${this
          .isLeftPanelMinimized
          ? 'minimized'
          : ''}"
      >
        <button class="back-button" @click=${this.deselectPlanet}>
          &larr; System View
        </button>
        <div class="panel-content-details">
          <h2>${planet.planetName}</h2>
          <h3>${planet.starSystem}</h3>

          <div class="stats-grid">
            <div><strong>Type</strong> ${planet.planetType}</div>
            <div><strong>Star</strong> ${planet.starType}</div>
            <div><strong>Distance</strong> ${planet.distanceLightYears} ly</div>
            <div><strong>Year</strong> ${planet.orbitalPeriod}</div>
          </div>

          <div class="detail-section">
            <h4>AI Whisper</h4>
            <p class="ai-whisper">${planet.aiWhisper}</p>
          </div>

          <div class="detail-section">
            <h4>Discovery Narrative</h4>
            <p>${planet.discoveryNarrative}</p>
          </div>

          <div class="detail-section">
            <h4>Key Features</h4>
            <ul>
              ${planet.keyFeatures.map((feature) => html`<li>${feature}</li>`)}
            </ul>
          </div>

          <div class="detail-section">
            <h4>Potential For Life: ${planet.potentialForLife.assessment}</h4>
            <p>${planet.potentialForLife.reasoning}</p>
          </div>

          ${planet.groundingChunks && planet.groundingChunks.length > 0
            ? html`
                <div class="detail-section data-sources">
                  <h4>Data Sources</h4>
                  ${planet.groundingChunks.map(
                    (chunk) =>
                      html`<a
                        href=${chunk.web?.uri}
                        target="_blank"
                        rel="noopener"
                        >${chunk.web?.title || chunk.web?.uri}</a
                      >`,
                  )}
                </div>
              `
            : ''}

          <div class="tech-readout">
            <div class="tech-log-entry">
              <span class="tech-uri-part">[${planetUri}]</span>
            </div>
            <div class="tech-log-entry">
              <span class="tech-key">UID:</span>
              <span class="tech-val">${planet.celestial_body_id}</span>
            </div>
            <div class="tech-log-entry">
              <span class="tech-key">Method:</span>
              <span class="tech-val">${planet.discoveryMethodology}</span>
            </div>
          </div>
        </div>
      </div>
    `;
  }

  private renderPlanetarySystemPanel() {
    return html`
      <div
        class="planetary-system-panel ${this.selectedPlanetId
          ? 'hidden'
          : ''} ${this.isLeftPanelMinimized ? 'minimized' : ''}"
      >
        <div
          class="panel-header"
          @click=${() => (this.isLeftPanelMinimized = !this.isLeftPanelMinimized)}
        >
          <h3>Planetary Systems</h3>
          <button
            class="minimize-btn"
            aria-label=${this.isLeftPanelMinimized
              ? 'Expand Panel'
              : 'Minimize Panel'}
          >
            _
          </button>
        </div>

        <div class="panel-content">
          <ul>
            ${this.filteredAndSortedPlanets.map(
              (planet) =>
                html` <li
                  style="cursor: pointer;"
                  @click=${() =>
                    this.dispatchEvent(
                      new CustomEvent('planet-selected-internal', {
                        detail: {planetId: planet.celestial_body_id},
                      }),
                    )}
                >
                  <span>${planet.celestial_body_id.split('-')[1]}</span>${planet.planetName}
                </li>`,
            )}
          </ul>
        </div>
      </div>
    `;
  }

  private renderShaderLab() {
    return html`
      <div class="shader-lab-container">
        <!-- Panel 1: Controls -->
        <div class="shader-lab-panel">
          <h3>Shader Controls</h3>
          <div class="shader-control-group">
            <label for="shader-color">Atmosphere Color</label>
            <input
              type="color"
              id="shader-color"
              .value=${this.shaderLabColor}
              @input=${(e: Event) =>
                (this.shaderLabColor = (e.target as HTMLInputElement).value)}
            />
          </div>

          <div class="shader-control-group">
            <label for="fresnel-slider">
              Fresnel Power: ${this.shaderLabFresnelPower.toFixed(1)}
            </label>
            <input
              type="range"
              id="fresnel-slider"
              min="1.0"
              max="16.0"
              step="0.1"
              .value=${String(this.shaderLabFresnelPower)}
              @input=${(e: Event) =>
                (this.shaderLabFresnelPower = parseFloat(
                  (e.target as HTMLInputElement).value,
                ))}
            />
          </div>

          <h3>Presets</h3>
          <div class="shader-control-group">
            <label for="preset-select">Load Preset</label>
            <select
              id="preset-select"
              .value=${this.selectedPreset}
              @change=${this.handleLoadPreset}
            >
              ${this.shaderLabPresets.map(
                (p) => html`<option value=${p.name}>${p.name}</option>`,
              )}
            </select>
          </div>
          <button class="train-button" @click=${this.handleSavePreset}>
            Save Current as Preset
          </button>

          <h3>Analysis</h3>
          <button
            class="train-button"
            @click=${this.handleExplainCode}
            ?disabled=${this.isExplanationLoading}
          >
            ${this.isExplanationLoading ? 'Analyzing...' : 'Explain Code with AI'}
          </button>
        </div>

        <!-- Panel 2: Live Preview -->
        <shader-lab-visualizer
          class="shader-lab-visualizer"
          .atmosphereColor=${this.shaderLabColor}
          .fresnelPower=${this.shaderLabFresnelPower}
        ></shader-lab-visualizer>

        <!-- Panel 3: Code Display -->
        <div class="shader-lab-panel">
          <h3>Shader Source Code</h3>
          <div class="shader-code-display">
            <h4>Vertex Shader (atmosphere-shader.tsx)</h4>
            <pre>${atmosphereVs}</pre>
          </div>
          <div class="shader-code-display">
            <h4>Fragment Shader (atmosphere-shader.tsx)</h4>
            <pre>${atmosphereFs}</pre>
          </div>
        </div>
      </div>
    `;
  }

  private renderAboutModal() {
    return html`
      <div class="modal-overlay" @click=${this.closeAboutModal}>
        <div class="modal-content" @click=${(e: Event) => e.stopPropagation()}>
          <button class="modal-close-button" @click=${this.closeAboutModal}>
            &times;
          </button>
          <h2>About AXEE</h2>
          <div class="modal-section">
            <h3>AURELION Exoplanet Synthesis Engine</h3>
            <p>
              AXEE is an advanced celestial discovery interface powered by
              Google's Gemini models. It allows for the procedural generation
              and exploration of fictional exoplanets, transforming natural
              language prompts into rich, detailed worlds.
            </p>
          </div>
          <div class="modal-section">
            <h3>Technology</h3>
            <p>
              This application is built with Lit, Three.js, and the Google AI
              SDK. It leverages Gemini for data synthesis and Google Search for
              grounding the generated content in real astronomical concepts. All
              data is stored locally in your browser.
            </p>
          </div>
        </div>
      </div>
    `;
  }

  private renderExplanationModal() {
    return html`
      <div
        class="modal-overlay"
        @click=${() => (this.isExplanationModalOpen = false)}
      >
        <div class="modal-content" @click=${(e: Event) => e.stopPropagation()}>
          <button
            class="modal-close-button"
            @click=${() => (this.isExplanationModalOpen = false)}
          >
            &times;
          </button>
          <h2>AI Shader Analysis</h2>
          <div class="modal-section">
            ${this.isExplanationLoading
              ? html`<div class="loader">
                  <div></div>
                  <div></div>
                  <div></div>
                </div>`
              : html`<div class="ai-explanation">
                  ${unsafeHTML(this.shaderLabExplanation)}
                </div>`}
          </div>
        </div>
      </div>
    `;
  }

  render() {
    const selectedPlanet = this.discoveredPlanets.find(
      (p) => p.celestial_body_id === this.selectedPlanetId,
    );

    const uniquePlanetTypes = [
      ...new Set(this.discoveredPlanets.map((p) => p.planetType)),
    ];

    return html`
      <axee-audio-engine
        .mood=${this.currentMood}
        .muted=${this.isMuted}
      ></axee-audio-engine>
      <axee-visuals-3d
        .planetsData=${this.filteredAndSortedPlanets}
        .selectedPlanetId=${this.selectedPlanetId}
        .isScanning=${this.isLoading && this.discoveryMode === 'analysis'}
        .viewMode=${this.visualsViewMode}
        @planet-selected=${this.handlePlanetSelected}
      ></axee-visuals-3d>

      <div class="overlay">
        <header>
          <div class="main-title">
            <h1>AXEE</h1>
            <h2>AURELION Exoplanet Synthesis Engine</h2>
          </div>
          <div
            class="top-right-controls ${this.isTopRightPanelMinimized
              ? 'minimized'
              : ''}"
          >
            <div
              class="panel-header"
              @click=${() =>
                (this.isTopRightPanelMinimized = !this.isTopRightPanelMinimized)}
            >
              <h3>System Controls</h3>
              <button
                class="minimize-btn"
                aria-label=${this.isTopRightPanelMinimized
                  ? 'Expand Panel'
                  : 'Minimize Panel'}
              >
                _
              </button>
            </div>
            <div class="controls-content">
              <div class="system-buttons">
                <button
                  class="header-button"
                  @click=${() =>
                    (this.visualsViewMode =
                      this.visualsViewMode === 'single' ? 'quad' : 'single')}
                >
                  View: ${this.visualsViewMode === 'single' ? 'Single' : 'Quad'}
                </button>
                <button class="header-button" @click=${this.openAboutModal}>
                  About
                </button>
              </div>
              <div class="filter-controls">
                <div class="filter-group">
                  <label for="life-filter">Life Potential</label>
                  <select
                    id="life-filter"
                    .value=${this.lifeFilter}
                    @change=${this.handleLifeFilterChange}
                  >
                    <option value="all">Any</option>
                    <option value="habitable">Habitable</option>
                    <option value="potentially-habitable">
                      Potentially Habitable
                    </option>
                    <option value="unlikely">Unlikely</option>
                  </select>
                </div>
                <div class="filter-group">
                  <label for="type-filter">Planet Type</label>
                  <select
                    id="type-filter"
                    .value=${this.typeFilter}
                    @change=${this.handleTypeFilterChange}
                  >
                    <option value="all">All Types</option>
                    ${uniquePlanetTypes.map(
                      (type) =>
                        html`<option
                          value=${type.replace(/ /g, '-').toLowerCase()}
                        >
                          ${type}
                        </option>`,
                    )}
                  </select>
                </div>
                <div class="filter-group">
                  <label for="feature-filter">Feature Keyword</label>
                  <input
                    type="text"
                    id="feature-filter"
                    placeholder="e.g., ocean, volcanic"
                    .value=${this.featureFilter}
                    @input=${this.handleFeatureFilterChange}
                  />
                </div>
                <div class="filter-group">
                  <label for="sort-by">Sort By</label>
                  <select
                    id="sort-by"
                    .value=${this.sortBy}
                    @change=${this.handleSortByChange}
                  >
                    <option value="discoveryDate_desc">Newest First</option>
                    <option value="name_asc">Name (A-Z)</option>
                    <option value="name_desc">Name (Z-A)</option>
                    <option value="distance_asc">Distance (Near-Far)</option>
                    <option value="distance_desc">Distance (Far-Near)</option>
                  </select>
                </div>
              </div>
            </div>
          </div>
        </header>

        <main>
          ${this.renderPlanetarySystemPanel()}
          ${selectedPlanet ? this.renderPlanetDetailPanel(selectedPlanet) : ''}

          <div
            class="engine-status-panel ${this.isLoading ? 'active' : ''} ${this
              .isStatusPanelMinimized
              ? 'minimized'
              : ''}"
          >
            ${this.renderAiModelStatus()}
          </div>
          <light-curve-visualizer
            ?isActive=${this.isAnalyzingData}
          ></light-curve-visualizer>

          ${this.discoveryMode === 'chat'
            ? html` <div class="chat-panel">
                <div class="chat-history">
                  ${this.chatHistory.length === 0
                    ? html`<div class="chat-placeholder">
                        <h3>AXEE Chat Interface</h3>
                        <p>
                          Ask about discovered planets, astronomy, or the cosmos.
                        </p>
                      </div>`
                    : this.chatHistory.map(
                        (msg) => html`
                          <div class="chat-message ${msg.role}">
                            <div class="message-bubble">${msg.text}</div>
                          </div>
                        `,
                      )}
                </div>
              </div>`
            : this.discoveryMode === 'shader-lab'
            ? this.renderShaderLab()
            : nothing}
        </main>

        <footer>
          <div
            class="status-bar"
            title=${this.error ? this.error : this.statusMessage}
          >
            ${this.isLoading
              ? html`<div class="loader"><div></div><div></div><div></div></div>`
              : nothing}
            <span>${this.error ? this.error : this.statusMessage}</span>
          </div>

          <div class="discovery-controls">
            <div class="mode-switch">
              <button
                class=${this.discoveryMode === 'synthesis' ? 'active' : ''}
                @click=${() => this.setDiscoveryMode('synthesis')}
              >
                Synthesis
              </button>
              <button
                class=${this.discoveryMode === 'analysis' ? 'active' : ''}
                @click=${() => this.setDiscoveryMode('analysis')}
                ?disabled=${this.aiModelStatus !== 'ready'}
                title=${this.aiModelStatus !== 'ready'
                  ? 'AI Model must be trained first.'
                  : 'Analysis Mode'}
              >
                Analysis
              </button>
              <button
                class=${this.discoveryMode === 'chat' ? 'active' : ''}
                @click=${() => this.setDiscoveryMode('chat')}
              >
                Chat
              </button>
              <button
                class=${this.discoveryMode === 'shader-lab' ? 'active' : ''}
                @click=${() => this.setDiscoveryMode('shader-lab')}
              >
                Shader Lab
              </button>
            </div>
            <control-tray
              .isMuted=${this.isMuted}
              @toggle-mute=${this.toggleMute}
            ></control-tray>
          </div>

          ${this.discoveryMode === 'synthesis'
            ? html` <div class="command-bar">
                <input
                  type="text"
                  placeholder="Describe a world to discover..."
                  .value=${this.userPrompt}
                  @input=${(e: Event) =>
                    (this.userPrompt = (e.target as HTMLInputElement).value)}
                  @keydown=${(e: KeyboardEvent) => {
                    if (e.key === 'Enter') this.handleSynthesis();
                  }}
                />
                <button
                  class="send-button"
                  @click=${this.handleSynthesis}
                  ?disabled=${this.isLoading || this.userPrompt.length === 0}
                  title="Synthesize Exoplanet"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 24 24"
                    fill="currentColor"
                  >
                    <path
                      d="M2.01 21L23 12 2.01 3 2 10l15 2-15 2z"
                    ></path>
                  </svg>
                </button>
              </div>`
            : this.discoveryMode === 'analysis'
            ? html`<div class="analysis-bar">
                <button
                  class="analyze-button"
                  @click=${this.handleAnalysis}
                  ?disabled=${this.isLoading || this.aiModelStatus !== 'ready'}
                  title=${this.aiModelStatus !== 'ready'
                    ? 'AI Model must be trained before analysis.'
                    : 'Analyze Light Curve Data'}
                >
                  ${this.isLoading ? 'ANALYZING...' : 'INITIATE ANALYSIS'}
                </button>
              </div>`
            : this.discoveryMode === 'chat'
            ? html` <div class="command-bar">
                <input
                  type="text"
                  placeholder="Ask AXEE a question..."
                  .value=${this.userPrompt}
                  @input=${(e: Event) =>
                    (this.userPrompt = (e.target as HTMLInputElement).value)}
                  @keydown=${(e: KeyboardEvent) => {
                    if (e.key === 'Enter') this.handleSendMessage();
                  }}
                />
                <button
                  class="send-button"
                  @click=${this.handleSendMessage}
                  ?disabled=${this.isLoading || this.userPrompt.length === 0}
                  title="Send Message"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    viewBox="0 0 24 24"
                    fill="currentColor"
                  >
                    <path
                      d="M2.01 21L23 12 2.01 3 2 10l15 2-15 2z"
                    ></path>
                  </svg>
                </button>
              </div>`
            : nothing}
        </footer>

        ${this.isAboutModalOpen ? this.renderAboutModal() : nothing}
        ${this.isExplanationModalOpen ? this.renderExplanationModal() : nothing}
      </div>
    `;
  }
}